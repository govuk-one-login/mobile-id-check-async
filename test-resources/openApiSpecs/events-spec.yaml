openapi: 3.0.0
info:
  title: GOV.UK One Login mobile app - API for testing audit events as part of the asynchronous issuing of credentials
  version: 1.0.0
  description: GOV.UK One Login mobile app - API for testing audit events as part of the asynchronous issuing of credentials

paths:
  /events:
    get:
      security:
        - sigv4Reference: [ ]
      operationId: getEvents
      summary: Endpoint to retrieve events for the given session
      description: >-
        Retrieve events for the given session. This endpoint is implemented as an APIGW service
        proxy - consumers should be aware that the underlying service may generate 5XX errors due to
        the distributed nature of AWS therefore occasional 5XX responses are safe to retry - see
        [AWS documentation on retries](https://docs.aws.amazon.com/general/latest/gr/api-retries.html)
      x-amazon-apigateway-request-validator: all
      parameters:
        - $ref: "#/components/parameters/pkParam"
        - $ref: "#/components/parameters/skPrefixParam"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                events:
                  type: array
                  items:
                    type: object
                    properties:
                      pk:
                        type: string
                      sk:
                        type: string
                      event:
                        type: object
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        "403":
          description: Access Denied
          content:
            text/plain:
              schema:
                type: string
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        "500":
          description: >-
            Internal server error - NB: This endpoint is implemented as an APIGW service proxy - consumers should be aware
            that the underlying service may generate 5XX errors due to the distributed nature of AWS therefore
            occasional 5XX responses are safe to retry - see
            [AWS documentation on retries](https://docs.aws.amazon.com/general/latest/gr/api-retries.html)
          content:
            text/plain:
              schema:
                type: string
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: "aws"
        passthroughBehavior: "never"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-2:dynamodb:action/Query"
        credentials:
          Fn::GetAtt: ["EventsApiRole", "Arn"]
        requestTemplates:
          application/json:
            Fn::Sub:
              - >
                #set($inputRoot = $input.params('$'))
                #set($pk = $input.params('pk'))
                #set($skPrefix = $input.params('skPrefix'))
                {
                  "TableName": "${tableName}",
                  "ExpressionAttributeValues": {
                    ":pk": {
                      "S": "$pk"
                    },
                    ":skPrefix": {
                      "S": "$skPrefix"
                    }
                  },
                  "ExpressionAttributeNames": {
                    "#pk": "pk",
                    "#sk": "sk",
                    "#event": "event"
                  },
                  "KeyConditionExpression": "#pk = :pk AND begins_with(#sk, :skPrefix)",
                  "ProjectionExpression": "#pk, #sk, #event"
                }
              - tableName:
                  Ref: EventsTable
        responses:
          "200":
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'no-store'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Strict-Transport-Security: "'max-age=31536000'"
              method.response.header.X-Content-Type-Options: "'nosniff'"
              method.response.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                #if($inputRoot.Count == 0)
                  #set($context.responseOverride.status = 404)
                  Not Found
                #else
                  [
                    #foreach($item in $inputRoot.Items)
                      #set($pk = $item.pk.S)
                      #set($sk = $item.sk.S)
                      #set($event = $util.parseJson($item.event.S))
                      {
                        "pk": "$pk"
                        "sk": "$sk"
                        "event": "$event"
                      }#if($foreach.hasNext), #end
                    #end
                  ]
                #end
          "400":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'no-store'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Strict-Transport-Security: "'max-age=31536000'"
              method.response.header.X-Content-Type-Options: "'nosniff'"
              method.response.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              text/plain: Bad Request
          "403":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'no-store'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Strict-Transport-Security: "'max-age=31536000'"
              method.response.header.X-Content-Type-Options: "'nosniff'"
              method.response.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              text/plain: Access Denied
          "404":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'no-store'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Strict-Transport-Security: "'max-age=31536000'"
              method.response.header.X-Content-Type-Options: "'nosniff'"
              method.response.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              text/plain: Not Found
          default:
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'no-store'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Strict-Transport-Security: "'max-age=31536000'"
              method.response.header.X-Content-Type-Options: "'nosniff'"
              method.response.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              text/plain: Internal server error
components:
  securitySchemes:
    sigv4Reference:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: awsSigv4
  parameters:
    pkParam:
      in: query
      name: pk
      description: The identifier used for a session.
      required: true
      schema:
        type: string
      example: "SESSION#mockSessionId"
    skPrefixParam:
      in: query
      name: skPrefix
      description: Event name
      required: true
      schema:
        type: string
      example: "TXMA#EVENT_NAME#DCMAW_ASYNC_CRI_START"
