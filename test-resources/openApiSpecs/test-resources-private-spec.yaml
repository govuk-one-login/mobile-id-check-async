openapi: 3.0.0
info:
  title: GOV.UK One Login mobile app - API for testing audit events as part of the asynchronous issuing of credentials
  version: 1.0.0
  description: GOV.UK One Login mobile app - API for testing audit events as part of the asynchronous issuing of credentials

paths:
  /events:
    get:
      security:
        - sigv4Reference: [ ]
      # operationId: getSessionInfo
      # summary: Endpoint to retrieve events for the given session
      # description: >-
      #   Retrieve events for the given session. This endpoint is implemented as an APIGW service proxy - consumers
      #   should be aware that the underlying service may generate 5XX errors due to the distributed nature of AWS therefore
      #   occasional 5XX responses are safe to retry - see
      #   [AWS documentation on retries](https://docs.aws.amazon.com/general/latest/gr/api-retries.html)
      # x-amazon-apigateway-request-validator: all
      # parameters:
      #   - in: path
      #     name: sessionId
      #     example: 44444444-4444-4444-4444-444444444444
      #     required: true
      #     description: a sessionId for the auth session
      #     schema:
      #       type: string
      #       format: uuid
      # tags:
      #   - Auth Session
      # responses:
      #   "200":
      #     description: OK
      #     headers:
      #       Access-Control-Allow-Origin:
      #         schema:
      #           type: "string"
      #       Cache-Control:
      #         schema:
      #           type: "string"
      #       Content-Type:
      #         schema:
      #           type: "string"
      #       Strict-Transport-Security:
      #         schema:
      #           type: "string"
      #       X-Content-Type-Options:
      #         schema:
      #           type: "string"
      #       X-Frame-Options:
      #         schema:
      #           type: "string"
      #   "401":
      #     description: Unauthorized - sessionId does not exist
      #     headers:
      #       Access-Control-Allow-Origin:
      #         schema:
      #           type: "string"
      #       Cache-Control:
      #         schema:
      #           type: "string"
      #       Content-Type:
      #         schema:
      #           type: "string"
      #       Strict-Transport-Security:
      #         schema:
      #           type: "string"
      #       X-Content-Type-Options:
      #         schema:
      #           type: "string"
      #       X-Frame-Options:
      #         schema:
      #           type: "string"
      #   "500":
      #     description: >-
      #       Internal server error - NB: This endpoint is implemented as an APIGW service proxy - consumers should be aware
      #       that the underlying service may generate 5XX errors due to the distributed nature of AWS therefore
      #       occasional 5XX responses are safe to retry - see
      #       [AWS documentation on retries](https://docs.aws.amazon.com/general/latest/gr/api-retries.html)
      #     headers:
      #       Access-Control-Allow-Origin:
      #         schema:
      #           type: "string"
      #       Cache-Control:
      #         schema:
      #           type: "string"
      #       Content-Type:
      #         schema:
      #           type: "string"
      #       Strict-Transport-Security:
      #         schema:
      #           type: "string"
      #       X-Content-Type-Options:
      #         schema:
      #           type: "string"
      #       X-Frame-Options:
      #         schema:
      #           type: "string"
      # x-amazon-apigateway-integration:
      #   type: "aws"
      #   passthroughBehavior: "never"
      #   httpMethod: "POST"
      #   uri: "arn:aws:apigateway:eu-west-2:dynamodb:action/Query"
      #   credentials:
      #     Fn::GetAtt: ["DynamoProxyReadSessionItemRoleForSessionInfo", "Arn"]
      #   requestTemplates:
      #     application/json:
      #       Fn::Sub:
      #         - >
      #           #set($sessionId = $input.params('sessionId'))
      #           {
      #             "TableName": "${table}",
      #             "PrimaryKey": "sessionId",
      #             "KeyConditionExpression": "sessionId = :sessionId",
      #             "ExpressionAttributeValues": {
      #               ":sessionId": {
      #                 "S": "$sessionId"
      #               }
      #             },
      #             "ProjectionExpression": "issuedOn",
      #             "Limit": 1
      #           }
      #         - table:
      #             Ref: SessionsTable
      #   responses:
      #     "200":
      #       statusCode: "200"
      #       responseParameters:
      #         method.response.header.Access-Control-Allow-Origin:
      #           Fn::FindInMap: [
      #             EnvironmentVariables,
      #             Ref: Environment,
      #             CORSALLOWEDORIGINHEADER
      #           ]
      #         method.response.header.Cache-Control: "'no-store'"
      #         method.response.header.Content-Type: "'application/json'"
      #         method.response.header.Strict-Transport-Security: "'max-age=31536000'"
      #         method.response.header.X-Content-Type-Options: "'nosniff'"
      #         method.response.header.X-Frame-Options: "'DENY'"
      #       responseTemplates:
      #         application/json: |
      #           #set($inputRoot = $input.path('$'))
      #           #if($inputRoot.Count == 0)
      #             #set($context.responseOverride.status = 401)
      #           #else
      #             {
      #               "issuedOn":$inputRoot.Items[0].issuedOn.S
      #             }
      #           #end

      #     default:
      #       statusCode: "500"
      #       responseParameters:
      #         method.response.header.Access-Control-Allow-Origin:
      #           Fn::FindInMap: [
      #             EnvironmentVariables,
      #             Ref: Environment,
      #             CORSALLOWEDORIGINHEADER
      #           ]
      #         method.response.header.Cache-Control: "'no-store'"
      #         method.response.header.Content-Type: "'application/json'"
      #         method.response.header.Strict-Transport-Security: "'max-age=31536000'"
      #         method.response.header.X-Content-Type-Options: "'nosniff'"
      #         method.response.header.X-Frame-Options: "'DENY'"
      #       responseTemplates:
      #         text/plain:
      #           Internal server error
components:
  securitySchemes:
    sigv4Reference:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: awsSigv4