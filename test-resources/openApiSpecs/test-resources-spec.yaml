openapi: 3.0.1
info:
  title: Test resources api
  description: API for mock assets used in test environments. This includes the test-sessions functionality, which interacts with the sessions table.
  version: 1.0.0
paths:
  /sessions/{sessionId}:
    put:
      summary: Create or update a session
      parameters:
        - in: path
          name: sessionId
          schema:
            type: string
          required: true
      description: >-
        The endpoint creates or updates a session in the backend-api Sessions table.
        This enables more difficult-to-test backend-api API test scenarios.
      security:
        - sigv4Reference: []
      responses:
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                serverError:
                  description: |
                    The service encountered an unrecoverable error when trying to access its internal resources.
                  value:
                    {
                      "error": "server_error",
                      "error_description": "Server Error"
                    }
              schema:
                $ref: "#/components/schemas/serverError"
        "501":
          description: Not Implemented
          content:
            text/plain:
              schema:
                type: string
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        passthroughBehavior: "when_no_match"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PutSessionFunction}:live/invocations"
        type: "aws_proxy"

  /credentialResult:
    get:
      security:
        - sigv4Reference: [ ]
      operationId: getCredentialResults
      summary: Dequeues credential results from the IPV Core Outbound SQS into Dynamo
      description: >-
        This endpoint is implemented as an APIGW service proxy - consumers should be aware that the underlying service may generate 5XX errors due to the distributed nature of AWS therefore occasional 5XX responses are safe to retry - see
        [AWS documentation on retries](https://docs.aws.amazon.com/general/latest/gr/api-retries.html)
      x-amazon-apigateway-request-validator: all
      parameters:
        - $ref: "#/components/parameters/pk"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    pk:
                      type: string
                    sk:
                      type: string
                    body:
                      type: object
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        "403":
          description: Access Denied
          content:
            text/plain:
              schema:
                type: string
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        "404":
          description: Not Found
          content:
            text/plain:
              schema:
                type: string
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
        "500":
          description: >-
            Internal server error - NB: This endpoint is implemented as an APIGW service proxy - consumers should be aware that the underlying service may generate 5XX errors due to the distributed nature of AWS therefore occasional 5XX responses are safe to retry - see
            [AWS documentation on retries](https://docs.aws.amazon.com/general/latest/gr/api-retries.html)
          content:
            text/plain:
              schema:
                type: string
          headers:
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
      x-amazon-apigateway-integration:
        type: "aws"
        passthroughBehavior: "never"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-2:dynamodb:action/Query"
        credentials:
          Fn::GetAtt: ["TestResourcesApiRole", "Arn"]
        requestTemplates:
          application/json:
            Fn::Sub:
              - >
                #set($inputRoot = $input.params('$'))
                #set($pk = $input.params('pk'))
                {
                  "TableName": "${tableName}",
                  "ExpressionAttributeValues": {
                    ":pk": {
                      "S": "$pk"
                    }
                  },
                  "ExpressionAttributeNames": {
                    "#pk": "pk",
                    "#sk": "sk",
                    "#body": "body"
                  },
                  "KeyConditionExpression": "#pk = :pk",
                  "ProjectionExpression": "#pk, #sk, #body"
                }
              - tableName:
                  Ref: CredentialResultsTable
        responses:
          "200":
            statusCode: "200"
            responseParameters:
              method.response.header.Cache-Control: "'no-store'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Strict-Transport-Security: "'max-age=31536000'"
              method.response.header.X-Content-Type-Options: "'nosniff'"
              method.response.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                #if($inputRoot.Count == 0)
                  #set($context.responseOverride.status = 404)
                  Not Found
                #else
                  [
                    #foreach($item in $inputRoot.Items)
                      #set($pk = $item.pk.S)
                      #set($sk = $item.sk.S)
                      #set($body = $item.body.S)
                      {
                        "pk": "$pk",
                        "sk": "$sk",
                        "body": $body
                      }#if($foreach.hasNext), #end
                    #end
                  ]
                #end
          "400":
            statusCode: "400"
            responseParameters:
              method.response.header.Cache-Control: "'no-store'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Strict-Transport-Security: "'max-age=31536000'"
              method.response.header.X-Content-Type-Options: "'nosniff'"
              method.response.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              text/plain: Bad Request
          "403":
            statusCode: "403"
            responseParameters:
              method.response.header.Cache-Control: "'no-store'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Strict-Transport-Security: "'max-age=31536000'"
              method.response.header.X-Content-Type-Options: "'nosniff'"
              method.response.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              text/plain: Access Denied
          "404":
            statusCode: "404"
            responseParameters:
              method.response.header.Cache-Control: "'no-store'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Strict-Transport-Security: "'max-age=31536000'"
              method.response.header.X-Content-Type-Options: "'nosniff'"
              method.response.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              text/plain: Not Found
          default:
            statusCode: "500"
            responseParameters:
              method.response.header.Cache-Control: "'no-store'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Strict-Transport-Security: "'max-age=31536000'"
              method.response.header.X-Content-Type-Options: "'nosniff'"
              method.response.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              text/plain: Internal server error

components:
  securitySchemes:
    sigv4Reference:
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
  parameters:
    pk:
      in: query
      name: pk
      description: The identifier used for a credential result.
      required: true
      schema:
        type: string
      example: "SUB#mockSub"
  schemas:
    serverError:
      type: object
      properties:
        error:
          type: string
          enum:
            - server_error
          description: |
            The error code.
        error_description:
          type: string
          description: |
            A description of the error.
      required:
        - error
        - error_description
