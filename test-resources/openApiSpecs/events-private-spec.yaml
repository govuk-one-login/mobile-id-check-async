openapi: 3.0.0
info:
  title: GOV.UK One Login mobile app - API for testing audit events as part of the asynchronous issuing of credentials
  version: 1.0.0
  description: GOV.UK One Login mobile app - API for testing audit events as part of the asynchronous issuing of credentials

paths:
  /events:
    get:
      security:
        - sigv4Reference: [ ]
      operationId: getSessionInfo
      summary: Endpoint to retrieve events for the given session
      description: >-
        Retrieve events for the given session. This endpoint is implemented as an APIGW service
        proxy - consumers should be aware that the underlying service may generate 5XX errors due to
        the distributed nature of AWS therefore occasional 5XX responses are safe to retry - see
        [AWS documentation on retries](https://docs.aws.amazon.com/general/latest/gr/api-retries.html)
      x-amazon-apigateway-request-validator: all
      parameters:
        - $ref: "#/components/parameters/sessionParam"
        - $ref: "#/components/parameters/eventNameParam"
        - $ref: "#/components/parameters/timestampParam"
      tags:
        - Auth Session
      responses:
        "200":
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
        "500":
          description: >-
            Internal server error - NB: This endpoint is implemented as an APIGW service proxy - consumers should be aware
            that the underlying service may generate 5XX errors due to the distributed nature of AWS therefore
            occasional 5XX responses are safe to retry - see
            [AWS documentation on retries](https://docs.aws.amazon.com/general/latest/gr/api-retries.html)
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        type: "aws"
        passthroughBehavior: "never"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:eu-west-2:dynamodb:action/Query"
        credentials:
          Fn::GetAtt: ["EventsApiRole", "Arn"]
        requestTemplates:
          application/json:
            Fn::Sub:
              - >
                #set($inputRoot = $input.params('$'))
                #set($session = $input.params('session'))
                #set($eventName = $input.params('eventName'))
                {
                  "TableName": "${tableName}",
                  "ExpressionAttributeValues": {
                    ":pk": {
                      "S": "$session"
                    },
                    ":skPrefix": {
                      "S": "$eventName"
                    }
                  },
                  "ExpressionAttributeNames": {
                    "#pk": "pk",
                    "#sk": "sk",
                    "#eb": "eventBody"
                  },
                  "KeyConditionExpression": "#pk = :pk AND begins_with(#sk, :skPrefix)",
                  "ProjectionExpression": "#eb"
                }
              - tableName:
                  Ref: EventsTable
        responses:
          "200":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::FindInMap: [
                  EnvironmentVariables,
                  Ref: Environment,
                  CORSALLOWEDORIGINHEADER
                ]
              method.response.header.Cache-Control: "'no-store'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Strict-Transport-Security: "'max-age=31536000'"
              method.response.header.X-Content-Type-Options: "'nosniff'"
              method.response.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              application/json: |
                #set($inputRoot = $input.path('$'))
                #if($inputRoot.Count == 0)
                  #set($context.responseOverride.status = 500)
                #else
                  {
                    "events": [
                      #foreach($event in $inputRoot.Items)
                        #set($eventBody = $util.parseJson($event.eventBody.S))
                        #set($eventName = $eventBody.event_name)
                        #set($sessionId = $eventBody.user.session_id)
                        #set($timestamp = $eventBody.timestamp)
                        {
                          "eventName": "$eventName"
                          "sessionId": "$sessionId"
                          "timestamp": "$timestamp"
                        }#if($foreach.hasNext), #end
                      #end
                    ]
                  }
                #end

          default:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin:
                Fn::FindInMap: [
                  EnvironmentVariables,
                  Ref: Environment,
                  CORSALLOWEDORIGINHEADER
                ]
              method.response.header.Cache-Control: "'no-store'"
              method.response.header.Content-Type: "'application/json'"
              method.response.header.Strict-Transport-Security: "'max-age=31536000'"
              method.response.header.X-Content-Type-Options: "'nosniff'"
              method.response.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              text/plain:
                Internal server error

components:
  securitySchemes:
    sigv4Reference:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: awsSigv4
  parameters:
    sessionParam:
      in: query
      name: session
      description: The identifier used for a session.
      required: false
      schema:
        type: string
    eventNameParam:
      in: query
      name: eventName
      description: Event name
      required: true
      schema:
        type: string
    timestampParam:
      in: query
      name: timestamp
      description: Epoch timestamp
      required: false
      schema:
        type: string
