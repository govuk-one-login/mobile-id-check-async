AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Description: The environment type
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - build
      - staging

  PermissionsBoundary:
    Description: |
      The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

  AsyncBackendStack:
    Description: The Stack name of the Async Backend stack
    Type: String
    Default: async-backend-api

Conditions:
  UsePermissionsBoundary: !Not
    - !Equals
      - !Ref PermissionsBoundary
      - none

  IsDevOrBuild: !Or
    - !Equals
      - !Ref Environment
      - dev
    - !Equals
      - !Ref Environment
      - build

Resources:
  # Test dequeue resources
  TestDequeueFunction:
    Type: AWS::Serverless::Function
    Condition: IsDevOrBuild
    DependsOn:
      - TestDequeueLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - testDequeue/testDequeueHandler.ts
    Properties:
      FunctionName: !Sub ${AWS::StackName}-test-dequeue
      Runtime: nodejs20.x
      Handler: testDequeueHandler.lambdaHandler
      Role: !GetAtt TestDequeueRole.Arn
      Timeout: 10
      VpcConfig:
        SubnetIds:
          - !ImportValue devplatform-vpc-PrivateSubnetIdA
          - !ImportValue devplatform-vpc-PrivateSubnetIdB
          - !ImportValue devplatform-vpc-PrivateSubnetIdC
        SecurityGroupIds:
          - !ImportValue devplatform-vpc-AWSServicesEndpointSecurityGroupId

  TestDequeueLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: IsDevOrBuild
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-test-dequeue

  TestDequeueRole:
    Type: AWS::IAM::Role
    Condition: IsDevOrBuild
    Properties:
      RoleName: !Sub ${AWS::StackName}-test-dequeue-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: SQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  Fn::ImportValue: !Sub ${AsyncBackendStack}-txma-sqs-queue-arn
        - PolicyName: KMSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  Fn::ImportValue: !Sub ${AsyncBackendStack}-txma-kms-encryption-key-arn
        - PolicyName: VpcPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: '*'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  TestDequeueEventSourceMapping:
    Condition: IsDevOrBuild
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn:
        Fn::ImportValue: !Sub ${AsyncBackendStack}-txma-sqs-queue-arn
      FunctionName: !GetAtt TestDequeueFunction.Arn
      FunctionResponseTypes:
        - ReportBatchItemFailures
