AWSTemplateFormatVersion: "2010-09-09"

Description: SAM template for the test resources stack. This contains the asynchronous events test harness and the sts-mock applications.

Parameters:
  BackendStackName:
    Description: |
      The Stack name of the Async Backend API stack
    Type: String
    Default: mob-async-backend

  CodeSigningConfigArn:
    Description: |
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Type: String
    Default: none

  DevOverrideProxyBaseUrl:
    Description: |
      Override the Proxy URL used in the API tests
    Type: String
    Default: none

  DevOverrideSessionsBaseUrl:
    Description: |
      Override the Sessions URL used in the API tests
    Type: String
    Default: none

  Environment:
    Description: The name of the deployment environment
    Type: String
    AllowedValues:
      - dev
      - build
    Default: dev

  PermissionsBoundary:
    Description: |
      The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

  SamValidateLintWorkaround:
    Description: Do not update or override. This allows the definition of a resource that is never deployed.
    Type: String
    Default: unused

Mappings:
  DNS:
    build:
      BaseDns: review-b-async.build.account.gov.uk
    dev:
      BaseDns: review-b-async.dev.account.gov.uk

  EventsApiGateway:
    build:
      ApiBurstLimit: 10
      ApiRateLimit: 10
    dev:
      ApiBurstLimit: 10
      ApiRateLimit: 10

  StsMockApiGateway:
    build:
      ApiBurstLimit: 10
      ApiRateLimit: 10
    dev:
      ApiBurstLimit: 10
      ApiRateLimit: 10

  TestResourcesApiGateway:
    build:
      ApiBurstLimit: 10
      ApiRateLimit: 10
    dev:
      ApiBurstLimit: 10
      ApiRateLimit: 10

Conditions:
  DevelopmentStack: !And
    - !Equals
      - !Ref Environment
      - dev
    - !Not
      - !Equals
        - !Ref AWS::StackName
        - mob-test-resources

  NeverDeploy: !Equals
    - !Ref SamValidateLintWorkaround
    - Should always equal false

  UseCodeSigning: !Not
    - !Equals
      - !Ref CodeSigningConfigArn
      - none

  UseDevOverrideProxyBaseUrl: !Not
    - !Equals
      - !Ref DevOverrideProxyBaseUrl
      - none

  UseDevOverrideSessionsBaseUrl: !Not
    - !Equals
      - !Ref DevOverrideSessionsBaseUrl
      - none

  UsePermissionsBoundary: !Not
    - !Equals
      - !Ref PermissionsBoundary
      - none

Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    AutoPublishAlias: live
    AutoPublishAliasAllProperties: true
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue

Resources:
  DequeueEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !ImportValue
        Fn::Sub: ${BackendStackName}-txma-sqs-queue-arn
      FunctionName: !GetAtt DequeueFunction.Arn
      FunctionResponseTypes:
        - ReportBatchItemFailures

  DequeueFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - DequeueLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/functions/dequeue/dequeueHandler.ts
        Minify: true
        Sourcemap: false
        Target: es2022
    Properties:
      Environment:
        Variables:
          EVENTS_TABLE_NAME: !Ref EventsTable
          TXMA_EVENT_TTL_DURATION_IN_SECONDS: 900
      FunctionName: !Sub ${AWS::StackName}-dequeue
      Handler: dequeueHandler.lambdaHandler
      Role: !GetAtt DequeueRole.Arn
      Runtime: nodejs20.x
      Timeout: 10
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue devplatform-vpc-AWSServicesEndpointSecurityGroupId
        SubnetIds:
          - !ImportValue devplatform-vpc-PrivateSubnetIdA
          - !ImportValue devplatform-vpc-PrivateSubnetIdB
          - !ImportValue devplatform-vpc-PrivateSubnetIdC

  DequeueLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-dequeue
      RetentionInDays: 30

  DequeueRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
            Version: "2012-10-17"
          PolicyName: LoggingPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Effect: Allow
                Resource: !ImportValue
                  Fn::Sub: ${BackendStackName}-txma-sqs-queue-arn
            Version: "2012-10-17"
          PolicyName: SQSPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - dynamodb:PutItem
                Effect: Allow
                Resource: !GetAtt EventsTable.Arn
            Version: "2012-10-17"
          PolicyName: DynamoDBPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - kms:Decrypt
                Effect: Allow
                Resource: !ImportValue
                  Fn::Sub: ${BackendStackName}-txma-kms-encryption-key-arn
            Version: "2012-10-17"
          PolicyName: KMSPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Effect: Allow
                Resource: '*'
            Version: "2012-10-17"
          PolicyName: VpcPolicy
      RoleName: !Sub ${AWS::StackName}-dequeue-role

  EventsApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${EventsApiAccessLogs}
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      Auth:
        ApiKeyRequired: false
        DefaultAuthorizer: AWS_IAM
        ResourcePolicy:
          AwsAccountWhitelist: !Sub ${AWS::AccountId}
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openApiSpecs/events-spec.yaml
      Description: API gateway for retrieving events
      EndpointConfiguration: REGIONAL
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
          ResourcePath: /*
          ThrottlingBurstLimit: !FindInMap
            - EventsApiGateway
            - !Ref Environment
            - ApiBurstLimit
          ThrottlingRateLimit: !FindInMap
            - EventsApiGateway
            - !Ref Environment
            - ApiRateLimit
      Name: !Sub ${AWS::StackName}-events
      OpenApiVersion: 3.0.1
      StageName: !Ref Environment

  EventsApiAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-events-api-access-logs-${Environment}
      RetentionInDays: 30

  EventsApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !If
        - DevelopmentStack
        - !Sub
          - events-${AWS::StackName}.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
        - !Sub
          - events.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
      RestApiId: !Ref EventsApi
      Stage: !Ref EventsApi.Stage

  EventsApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !If
        - DevelopmentStack
        - !Sub
          - events-${AWS::StackName}.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
        - !Sub
          - events.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !If
        - DevelopmentStack
        - !Sub '{{resolve:ssm:/${Environment}/Platform/ACM/AsyncPrimaryZoneWildcardCertificateV1ARN}}'
        - !Sub '{{resolve:ssm:/${Environment}/Platform/ACM/AsyncPrimaryZoneEventsCertificateV1ARN}}'
      SecurityPolicy: TLS_1_2

  EventsApiRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt EventsApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt EventsApiDomainName.RegionalHostedZoneId
      HostedZoneId: !Sub '{{resolve:ssm:/${Environment}/Platform/Route53/PrimaryZoneID}}'
      Name: !If
        - DevelopmentStack
        - !Sub
          - events-${AWS::StackName}.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
        - !Sub
          - events.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
      Type: A

  EventsApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
        Version: "2012-10-17"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - dynamodb:Query
                Condition:
                  ForAllValues:StringEquals:
                    dynamodb:Attributes:
                      - pk
                      - sk
                      - event
                  StringEquals:
                    dynamodb:Select: SPECIFIC_ATTRIBUTES
                Effect: Allow
                Resource: !GetAtt EventsTable.Arn
            Version: "2012-10-17"
          PolicyName: EventsPolicy
      RoleName: !Sub ${AWS::StackName}-events-api

  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      SSESpecification:
        SSEEnabled: true
      TableName: !Sub ${AWS::StackName}-events-table-${Environment}
      TimeToLiveSpecification:
        AttributeName: timeToLiveInSeconds
        Enabled: true

  JwksBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${AWS::StackName}-jwks-${Environment}
      LoggingConfiguration:
        DestinationBucketName: !Ref JwksBucketAccessLogs
        LogFilePrefix: !Sub ${AWS::StackName}-jwks
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  JwksBucketAccessLogs:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub ${AWS::StackName}-jwks-access-logs-${Environment}
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  JwksBucketAccessLogsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JwksBucketAccessLogs
      PolicyDocument:
        Statement:
          - Action: '*'
            Condition:
              Bool:
                aws:SecureTransport: false
            Effect: Deny
            Principal:
              AWS: '*'
            Resource: !Sub
              - arn:aws:s3:::${bucketName}/*
              - bucketName: !Ref JwksBucketAccessLogs
          - Action:
              - s3:PutObject
            Condition:
              ArnLike:
                aws:SourceArn: !GetAtt JwksBucket.Arn
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource: !Sub
              - arn:aws:s3:::${bucketName}/*
              - bucketName: !Ref JwksBucketAccessLogs
        Version: "2012-10-17"

  JwksBucketApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - !Sub ${JwksBucket.Arn}/.well-known/jwks.json
            Version: "2012-10-17"
          PolicyName: JwksBucketPolicy
      RoleName: !Sub ${AWS::StackName}-jwks-bucket-api

  JwksBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JwksBucket
      PolicyDocument:
        Statement:
          - Action: '*'
            Condition:
              Bool:
                aws:SecureTransport: false
            Effect: Deny
            Principal:
              AWS: '*'
            Resource: !Sub
              - arn:aws:s3:::${TargetBucket}/*
              - TargetBucket: !Ref JwksBucket
        Version: "2012-10-17"

  NullResource:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: NeverDeploy

  StsMockApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StsMockApiAccessLogs}
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openApiSpecs/sts-mock-spec.yaml
      Description: Public API gateway for STS Mock
      EndpointConfiguration: REGIONAL
      MethodSettings:
        - DataTraceEnabled: true
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
          ResourcePath: /*
          ThrottlingBurstLimit: !FindInMap
            - StsMockApiGateway
            - !Ref Environment
            - ApiBurstLimit
          ThrottlingRateLimit: !FindInMap
            - StsMockApiGateway
            - !Ref Environment
            - ApiRateLimit
      Name: !Sub ${AWS::StackName}-api
      OpenApiVersion: 3.0.1
      StageName: !Ref Environment

  StsMockApiAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-api-access-logs
      RetentionInDays: 30

  StsMockApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !If
        - DevelopmentStack
        - !Sub
          - sts-${AWS::StackName}.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
        - !Sub
          - sts-mock.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
      RestApiId: !Ref StsMockApi
      Stage: !Ref StsMockApi.Stage

  StsMockApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !If
        - DevelopmentStack
        - !Sub
          - sts-${AWS::StackName}.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
        - !Sub
          - sts-mock.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !If
        - DevelopmentStack
        - !Sub '{{resolve:ssm:/${Environment}/Platform/ACM/AsyncPrimaryZoneWildcardCertificateV1ARN}}'
        - !Sub '{{resolve:ssm:/${Environment}/Platform/ACM/AsyncPrimaryZoneStsMockCertificateV2ARN}}'
      SecurityPolicy: TLS_1_2

  StsMockApiRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt StsMockApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt StsMockApiDomainName.RegionalHostedZoneId
      HostedZoneId: !Sub '{{resolve:ssm:/${Environment}/Platform/Route53/PrimaryZoneID}}'
      Name: !If
        - DevelopmentStack
        - !Sub
          - sts-${AWS::StackName}.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
        - !Sub
          - sts-mock.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
      Type: A

  TestResourcesApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${TestResourcesApi}
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      AlwaysDeploy: true
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openApiSpecs/test-resources-spec.yaml
      Description: API for test assets
      EndpointConfiguration: REGIONAL
      MethodSettings:
        - DataTraceEnabled: false
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
          ResourcePath: /*
          ThrottlingBurstLimit: !FindInMap
            - TestResourcesApiGateway
            - !Ref Environment
            - ApiBurstLimit
          ThrottlingRateLimit: !FindInMap
            - TestResourcesApiGateway
            - !Ref Environment
            - ApiRateLimit
      Name: !Sub ${AWS::StackName}-test-resources-api
      OpenApiVersion: 3.0.1
      StageName: !Ref Environment

  TestResourcesApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: TestResourcesApiDomainName
    Properties:
      DomainName: !If
        - DevelopmentStack
        - !Sub
          - test-resources-${AWS::StackName}.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
        - !Sub
          - test-resources.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
      RestApiId: !Ref TestResourcesApi
      Stage: !Ref TestResourcesApi.Stage

  TestResourcesApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !If
        - DevelopmentStack
        - !Sub
          - test-resources-${AWS::StackName}.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
        - !Sub
          - test-resources.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !If
        - DevelopmentStack
        - !Sub '{{resolve:ssm:/${Environment}/Platform/ACM/AsyncPrimaryZoneWildcardCertificateV1ARN}}'
        - !Sub '{{resolve:ssm:/${Environment}/Platform/ACM/AsyncPrimaryZoneTestResourcesCertificateV1ARN}}'
      SecurityPolicy: TLS_1_2

  TestResourcesApiRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt TestResourcesApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt TestResourcesApiDomainName.RegionalHostedZoneId
      HostedZoneId: !Sub '{{resolve:ssm:/${Environment}/Platform/Route53/PrimaryZoneID}}'
      Name: !If
        - DevelopmentStack
        - !Sub
          - test-resources-${AWS::StackName}.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
        - !Sub
          - test-resources.${DNS_RECORD}
          - DNS_RECORD: !FindInMap
              - DNS
              - !Ref Environment
              - BaseDns
      Type: A

  TestResourcesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-test-resources-api-access-logs
      RetentionInDays: 30

  TestSessionsFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - TestSessionsFunctionLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/functions/test-sessions/testSessionsHandler.ts
        Minify: true
        Sourcemap: false
        Target: es2022
    Properties:
      Description: Test sessions lambda for putting items into the Sessions table
      Environment:
        Variables:
          SESSIONS_TABLE_NAME: !ImportValue
            Fn::Sub: ${BackendStackName}-sessions-table-arn
      Events:
        TestSessions:
          Properties:
            Method: put
            Path: /test-sessions/{sessionId}
            RestApiId: !Ref TestResourcesApi
          Type: Api
      FunctionName: !Sub ${AWS::StackName}-test-sessions
      Handler: testSessionsHandler.lambdaHandler
      Role: !GetAtt TestSessionsFunctionRole.Arn
      Runtime: nodejs20.x
      Timeout: 5
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue devplatform-vpc-AWSServicesEndpointSecurityGroupId
        SubnetIds:
          - !ImportValue devplatform-vpc-PrivateSubnetIdA
          - !ImportValue devplatform-vpc-PrivateSubnetIdB
          - !ImportValue devplatform-vpc-PrivateSubnetIdC

  TestSessionsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-test-sessions
      RetentionInDays: 30

  TestSessionsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Description: Execution role for the test sessions handler
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Effect: Allow
                Resource: '*'
            Version: "2012-10-17"
          PolicyName: VpcPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
            Version: "2012-10-17"
          PolicyName: LoggingPolicy
      RoleName: !Sub ${AWS::StackName}-test-sessions

  TokenFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - TokenFunctionLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - src/functions/sts-mock/token/tokenHandler.ts
        Minify: true
        Sourcemap: false
        Target: es2022
    Properties:
      Description: Mock STS token function for exchanging an access token for a service token
      Environment:
        Variables:
          ASYNC_BACKEND_BASE_URL: !If
            - UseDevOverrideSessionsBaseUrl
            - !Ref DevOverrideSessionsBaseUrl
            - !Sub https://sessions.review-b-async.${Environment}.account.gov.uk
          KEY_STORAGE_BUCKET_NAME: !Ref JwksBucket
          STS_MOCK_BASE_URL: !Sub https://${StsMockApiDomainName}
      Events:
        Token:
          Properties:
            Method: post
            Path: /token
            RestApiId: !Ref StsMockApi
          Type: Api
      FunctionName: !Sub ${AWS::StackName}-token
      Handler: tokenHandler.lambdaHandler
      Role: !GetAtt TokenFunctionRole.Arn
      Runtime: nodejs20.x
      Timeout: 5
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue devplatform-vpc-AWSServicesEndpointSecurityGroupId
        SubnetIds:
          - !ImportValue devplatform-vpc-ProtectedSubnetIdA
          - !ImportValue devplatform-vpc-ProtectedSubnetIdB
          - !ImportValue devplatform-vpc-ProtectedSubnetIdC

  TokenFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-token
      RetentionInDays: 30

  TokenFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TokenFunction.Arn
      Principal: events.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${StsMockApi}/*/*/*

  TokenFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Description: Execution role for the token function
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                Effect: Allow
                Resource:
                  - !Sub
                    - arn:aws:s3:::${TargetBucket}/*
                    - TargetBucket: !Ref JwksBucket
            Version: "2012-10-17"
          PolicyName: S3ReadPolicy
      RoleName: !Sub ${AWS::StackName}-token

Outputs:
  EventsApiUrl:
    Description: Events API URL
    Value: !Sub https://${EventsApiDomainName}

  ProxyApiUrl:
    Description: Proxy API URL used in the Events API tests
    Value: !If
      - UseDevOverrideProxyBaseUrl
      - !Ref DevOverrideProxyBaseUrl
      - !Sub https://proxy.review-b-async.${Environment}.account.gov.uk

  SessionsApiUrl:
    Description: Sessions API URL used in the Events API tests
    Value: !If
      - UseDevOverrideSessionsBaseUrl
      - !Ref DevOverrideSessionsBaseUrl
      - !Sub https://sessions.review-b-async.${Environment}.account.gov.uk

  StsMockApiUrl:
    Description: STS Mock API Gateway DNS
    Value: !Sub https://${StsMockApiDomainName}

  TestResourcesApiUrl:
    Description: Test Resources API Gateway Url
    Value: !Sub https://${TestResourcesApiDomainName}
