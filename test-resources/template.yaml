AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Description: The environment type
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - build

  PermissionsBoundary:
    Description: |
      The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

  BackendApi:
    Description: The Stack name of the Async Backend stack
    Type: String
    Default: mob-async-backend

Mappings:
  Apigw:
    dev:
      ApiBurstLimit: 10
      ApiRateLimit: 10
    build:
      ApiBurstLimit: 10
      ApiRateLimit: 10
  DNS:
    dev:
      BaseDns: review-b-async.dev.account.gov.uk
    build:
      BaseDns: review-b-async.build.account.gov.uk

Conditions:
  UsePermissionsBoundary: !Not
    - !Equals
      - !Ref PermissionsBoundary
      - none

Resources:
  EventsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-events-api
      Description: API gateway for retrieving events
      EndpointConfiguration: REGIONAL
      Auth:
        DefaultAuthorizer: AWS_IAM
        ApiKeyRequired: false
        ResourcePolicy:
          AwsAccountWhitelist: !Sub ${AWS::AccountId}
      StageName: !Ref Environment
      OpenApiVersion: 3.0.1
      AccessLogSetting:
        DestinationArn: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${EventsApiAccessLogs}
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: /*
          HttpMethod: '*'
          DataTraceEnabled: true
          MetricsEnabled: true
          ThrottlingBurstLimit: !FindInMap
            - Apigw
            - !Ref Environment
            - ApiBurstLimit
          ThrottlingRateLimit: !FindInMap
            - Apigw
            - !Ref Environment
            - ApiRateLimit
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openApiSpecs/events-spec.yaml

  EventsApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: EventsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - "dynamodb:Query"
                Resource: !GetAtt EventsTable.Arn
                Condition:
                  ForAllValues:StringEquals:
                    dynamodb:Attributes:
                      - pk
                      - sk
                      - event
                  StringEquals:
                    dynamodb:Select: SPECIFIC_ATTRIBUTES

  EventsApiAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-events-api-access-logs-${Environment}
      RetentionInDays: 30

  # Dequeue resources
  DequeueFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - DequeueLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - src/dequeue/dequeueHandler.ts
    Properties:
      FunctionName: !Sub ${AWS::StackName}-dequeue
      Runtime: nodejs20.x
      Handler: dequeueHandler.lambdaHandler
      Role: !GetAtt DequeueRole.Arn
      Environment:
        Variables:
          TXMA_EVENT_TTL_DURATION_IN_SECONDS: 900
          EVENTS_TABLE_NAME: !Ref EventsTable
      Timeout: 10
      VpcConfig:
        SubnetIds:
          - !ImportValue devplatform-vpc-PrivateSubnetIdA
          - !ImportValue devplatform-vpc-PrivateSubnetIdB
          - !ImportValue devplatform-vpc-PrivateSubnetIdC
        SecurityGroupIds:
          - !ImportValue devplatform-vpc-AWSServicesEndpointSecurityGroupId

  DequeueLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-dequeue

  DequeueRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-dequeue-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: SQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  Fn::ImportValue: !Sub ${BackendApi}-txma-sqs-queue-arn
        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt EventsTable.Arn
        - PolicyName: KMSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  Fn::ImportValue: !Sub ${BackendApi}-txma-kms-encryption-key-arn
        - PolicyName: VpcPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: '*'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  DequeueEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn:
        Fn::ImportValue: !Sub ${BackendApi}-txma-sqs-queue-arn
      FunctionName: !GetAtt DequeueFunction.Arn
      FunctionResponseTypes:
        - ReportBatchItemFailures

  EventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-events-table-${Environment}
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      TimeToLiveSpecification:
        AttributeName: timeToLiveInSeconds
        Enabled: true
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
