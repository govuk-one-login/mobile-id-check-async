AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM template for the STS mock
Mappings:
  StsMockApiGateway:
    dev: 
      ApiBurstLimit: 10
      ApiRateLimit: 10
    build: 
      ApiBurstLimit: 0
      ApiRateLimit: 0
    staging: 
      ApiBurstLimit: 0
      ApiRateLimit: 0
Parameters:
  Environment:
    Description: "The environment type"
    Type: "String"
    Default: dev


Resources:
### Public API gateway for STS Mock
  StsMockApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-sts-mock-api"
      Description: Public API gateway for STS Mock
      EndpointConfiguration: REGIONAL
      StageName: 
        Ref: Environment
      OpenApiVersion: 3.0.1
      AccessLogSetting:
        DestinationArn: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${StsMockApiAccessLogs}"
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: '*'
          DataTraceEnabled: true
          MetricsEnabled: true
          ThrottlingBurstLimit: !FindInMap [ StsMockApiGateway, !Ref Environment, ApiBurstLimit ]
          ThrottlingRateLimit: !FindInMap [ StsMockApiGateway, !Ref Environment, ApiRateLimit ]
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: './openApiSpecs/sts-mock-spec.yaml'

  StsMockApiAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-sts-mock-api-access-logs
      RetentionInDays: 30

### Token lambda
  TokenFunction:
    DependsOn:
      - "TokenFunctionLogGroup"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: false
        EntryPoints:
          - tokenHandler.ts
    Properties:
      Description: Mock STS token function for exchanging an access token for a service token
      AutoPublishAlias: live
      FunctionName: !Sub "${AWS::StackName}-token"
      Runtime: nodejs20.x
      Handler: tokenHandler.lambdaHandler
      CodeUri: src/token/
      Events:
        Token:
          Type: Api
          Properties:
            Path: /token
            Method: post
            RestApiId: !Ref StsMockApi
      Role: !GetAtt TokenFunctionLambdaRole.Arn

  TokenFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt TokenFunction.Arn
      Principal: events.amazonaws.com
      SourceAccount: !Sub "${AWS::AccountId}"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${StsMockApi}/*/*/*"

  TokenFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-token"

  TokenFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-token
      Description: Execution role for the token function
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: TokenFunctionLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: TokenFunctionS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Ref JsonWebKeysBucket

  JsonWebKeysBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'sts-${AWS::StackName}-jwks-${Environment}'
      VersioningConfiguration:
        Status: 'Enabled'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref JsonWebKeysBucketAccessLogs
        LogFilePrefix: !Sub sts-${AWS::StackName}-jwks-${Environment}

  JsonWebKeysBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JsonWebKeysBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Deny
            Principal:
              AWS: '*'
            Action: '*'
            Resource: !Sub
              - arn:aws:s3:::${bucketName}/*
              - bucketName: !Ref JsonWebKeysBucket
            Condition:
              Bool:
                "aws:SecureTransport": false

  JsonWebKeysBucketAccessLogs:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub sts-${AWS::StackName}-jwks-${Environment}-access-logs
      VersioningConfiguration:
        Status: 'Enabled'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  JsonWebKeysBucketAccessLogsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JsonWebKeysBucketAccessLogs
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Deny'
            Principal:
              AWS: '*'
            Action: '*'
            Resource: !Sub
              - 'arn:aws:s3:::${bucketName}/*'
              - bucketName: !Ref JsonWebKeysBucketAccessLogs
            Condition:
              Bool:
                "aws:SecureTransport": false
          - Effect: 'Allow'
            Principal:
              Service: logging.s3.amazonaws.com
            Action:
              - "s3:PutObject"
            Resource: !Sub
              - 'arn:aws:s3:::${bucketName}/*'
              - bucketName: !Ref JsonWebKeysBucketAccessLogs
            Condition:
              ArnLike:
                aws:SourceArn: !GetAtt JsonWebKeysBucket.Arn
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId