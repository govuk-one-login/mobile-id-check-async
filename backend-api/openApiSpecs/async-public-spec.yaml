openapi: 3.0.0
info:
  title: GOV.UK One Login mobile app - API for asynchronous issuing of credentials
  version: 1.0.0
  description: GOV.UK One Login mobile app - API for asynchronous issuing of credentials

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: |
            The error code.
          enum:
            - server_error
            - invalid_session
            - session_not_found
            - invalid_request
        error_description:
          type: string
          description: |
            A description of the error.
      required:
        - error
        - error_description
    ServerError:
      type: object
      properties:
        error:
          type: string
          enum:
            - server_error
          description: |
            The error code.
        error_description:
          type: string
          description: |
            A description of the error.
      required:
        - error
        - error_description
    WriteTxmaEventBody:
      type: object
      required:
        - sessionId
        - eventName
      properties:
        sessionId:
          type: string
        eventName:
          type: string
          description: The name of the txma event being written to SQS
          enum:
            - DCMAW_APP_HANDOFF_START
            - DCMAW_APP_HANDOFF_FAILURE
            - DCMAW_HYBRID_BILLING_STARTED
            - DCMAW_IPROOV_BILLING_STARTED
            - DCMAW_READID_NFC_BILLING_STARTED
    WriteTxmaEventResponse:
      type: string
      description: confirms the TxMA event has been written.

paths:
  /async/activeSession:
    get:
      security:
        - bearerAuth: []
      summary: Look for an active session for a given user.
      description: Query the session database to find an active session for a given user and returns it if found.
      parameters:
        - name: Authorization
          in: header
          required: true
          description: "A valid service token (e.g.: Authorization:Bearer <service-token-value>)"
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              examples:
                success:
                  value:
                    {
                      "sessionId": "37aae92b-a51e-4f68-b571-8e455fb0ec34",
                      "redirectUri": "https://example/redirect",
                      "state": "11112222333344445555666677778888"
                    }
              schema:
                type: object
                properties:
                  sessionId:
                    type: string
                    description: |
                      The ID of an active session found for a given sub identifier.
                  state:
                    type: string
                    description: |
                      Cryptographically secure random string provided by IPV when session created and stored in authSession table.
                  redirectUri:
                    type: string
                    description: |
                      Registered client redirect_uri where app should attempt to get the user back to once ID check is complete.
                required:
                  - sessionId
                  - state
        '400':
            description: Bad request
            content:
              application/json:
                examples:
                  invalidServiceToken:
                    description: |
                      The service token could not be decrypted OR the service token signature could not be verified OR the service token payload is invalid.
                    value:
                      {
                        "error": "invalid_request",
                        "error_description": "Failed decrypting service token"
                      }
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      enum:
                        - invalid_request
                      description: |
                        The error code.
                    error_description:
                      type: string
                      description: |
                        A description of the error.
                  required:
                    - error
                    - error_description
        '401':
            description: Unauthorized
            content:
              application/json:
                examples:
                  invalidAuthorizationHeader:
                    description: |
                      Unauthorized, usually signifies the authorization bearer access token is missing or is malformed.
                    value:
                      {
                        "error": "unauthorized",
                        "error_description": "Invalid authorization header"
                      }
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      enum:
                        - unauthorized
                      description: |
                        The error code.
                    error_description:
                      type: string
                      description: |
                        A description of the error.
                  required:
                    - error
                    - error_description
        '404':
            description: Session not found
            content:
              application/json:
                examples:
                  sessionNotFound:
                    description: |
                      The active session with correct state is not found for given sub identifier.
                    value:
                      {
                        "error": "session_not_found",
                        "error_description": "No active session found for the given sub identifier"
                      }
                schema:
                  type: object
                  enum:
                    - session_not_found
                  properties:
                    error:
                      type: string
                      description: |
                        The error code.
                    error_description:
                      type: string
                      description: |
                        A description of the error.
                  required:
                    - error
                    - error_description
        '500':
          description: Internal server error
          content:
            application/json:
              examples:
                serverError:
                  description: |
                    The service encountered an unrecoverable error when trying to access its internal resources.
                  value:
                    {
                      "error": "server_error",
                      "error_description": "Server Error"
                    }
              schema:
                $ref: "#/components/schemas/ServerError"
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json:
            statusCode: 200
        httpMethod: "POST"
        passthroughBehavior: "when_no_match"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AsyncActiveSessionFunction}:live/invocations"
        type: "aws_proxy"

  /async/biometricToken:
    post:
      description: Retrieves a biometric access token for the document selected by the user
      requestBody:
        required: true
        description: A JSON object that contains the session ID and the document selected by the user
        content:
          application/json:
            schema:
              type: object
              properties:
                sessionId:
                  description: Id for an auth session
                  type: string
                documentType:
                  description: Document selected by user for identity check
                  type: string
                  enum:
                    - NFC_PASSPORT
                    - UK_DRIVING_LICENCE
                    - UK_NFC_BRP
              required:
                - sessionId
                - documentType
      responses:
        '200':
          description: OK
          content:
            application/json:
              examples:
                success:
                  value:
                    {
                      "accessToken": "string",
                      "opaqueId": "6ec96ea7-941c-4967-9fcf-94fc9b717a22"
                    }
              schema:
                type: object
                required:
                  - accessToken
                  - opaqueId
                properties:
                  accessToken:
                    type: string
                    description: access token depending on passport, DL or BRP selection to access the third-party biometric check endpoints
                  opaqueId:
                    type: string
                    format: uuid
                    description: generated token to be sent to the vendor when starting a new biometric session to facilitate fraud detection
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                errorInvalidRequest:
                  description: |
                    Request body is invalid json and unable to parse
                  value:
                    {
                      "error": "invalid_request",
                      "error_description": "Request body is invalid json"
                    }
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: unauthorized
          content:
            application/json:
              examples:
                errorInvalidSession:
                  description: |
                    Session does not exist or in incorrect state
                  value:
                    {
                      "error": "invalid_session",
                      "error_description": "Session does not exist or in incorrect state"
                    }
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal Server Error
          content:
            application/json:
              examples:
                internalServerError:
                  description: |
                    The server has encountered an unexpected condition or configuration problem that prevents 
                    it from fulfilling the request made by the browser or client.
                  value:
                    {
                      "error": "server_error",
                      "error_description": "Internal server error"
                    }
              schema:
                $ref: "#/components/schemas/ServerError"
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json:
            statusCode: 200
        httpMethod: "POST"
        passthroughBehavior: "when_no_match"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AsyncBiometricTokenFunction}:live/invocations"
        type: "aws_proxy"

  /async/finishBiometricSession:
    post:
      summary: App signifies to backend that user interaction for biometric session is complete
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authSessionId:
                  type: string
                  format: uuid
                  example: 11111111-1111-1111-1111-111111111111
                  description: |
                    authSessionId for the active session. Note this is effectively a short-lived bearer token
                  pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
                biometricSessionId:
                  type: string
                  format: uuid
                  example: 22222222-2222-2222-2222-222222222222
                  description: |
                    biometricSessionId for the READID session that the user has just completed
                  pattern: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
              required:
                - authSessionId
                - biometricSessionId
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                errorInvalidRequest:
                  description: |
                    Invalid request body
                  value:
                    {
                      "error": "invalid_request",
                      "error_description": "Invalid request body"
                    }
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                errorInvalidSession:
                  description: |
                    Invalid session
                  value:
                    {
                      "error": "invalid_session",
                      "error_description": "authSessionId not recognised or not in a valid state"
                    }
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal Server Error
          content:
            application/json:
              examples:
                internalServerError:
                  description: |
                    The server has encountered an unexpected condition or configuration problem that prevents 
                    it from fulfilling the request made by the browser or client.
                  value:
                    {
                      "error": "server_error",
                      "error_description": "Internal server error"
                    }
              schema:
                $ref: "#/components/schemas/ServerError"
# Created with mock integration, This needs to be replaced with lambda proxy integration when available
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json:
            statusCode: 200
        httpMethod: "POST"
        passthroughBehavior: "when_no_match"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AsyncFinishBiometricSessionFunction}:live/invocations"
        type: "aws_proxy"

  /.well-known/jwks.json:
    get:
      operationId: getWellKnownJwks
      summary: Retrieve the encryption public keys in JWKS format.
      description: >-
        Return the current valid public keys used to encrypt JWTs issued by the service as a JSON Web Key Set.
      tags:
        - Static
      responses:
        "200":
          description: OK
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
            Content-Security-Policy:
              schema:
                type: "string"
            Feature-Policy:
              schema:
                type: "string"
            Referrer-Policy:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: array
                    items:
                      type: object
                      properties:
                        kid:
                          type: string
                        kty:
                          type: string
                        alg:
                          type: string
                        use:
                          type: string
                        e:
                          type: string
                        n:
                          type: string
              examples:
                success:
                  value:
                    {
                      "keys": [
                        {
                          "kty": "RSA",
                          "n": "kOBby1nEUcKc-94zIa2qCyqDSE1-2bLWkVjeF3DWY_0v2j9wlLSaR6asONen_HP40wftLOSPYRcKYv6Cjz3LOY7aQYznX14EXSgJxrDwQ7AleX2VS_HB34LMZEa3xmSSH7pLtw_vmJgCNss0zDQLCz1sQwZxlqphF18FdTTUrXbJ9Qk3xIrEzvL2naO2r6WoLBQ9tSr2Sz9TTcJQptfh6hOAHm66oPA6F9uCmbTDEQeI-wLiMMArtcKrGiPAFluo8f0qNkzLRMFIqyadnZ9OZ5u0-H_urOkmLJ2nbAnyTcO-9QeDlomdEMz3yEaJeUoq-jnPpVEfIbd8-07fl7M27w",
                          "e": "AQAB",
                          "use": "enc",
                          "alg": "RSA-OAEP-256",
                          "kid": "da48d440-8e51-4383-9a3a-b91ce5adcf2a"
                        }
                      ]
                    }
        "500":
          description: "Internal Server Error"
          headers:
            Cache-Control:
              schema:
                type: "string"
            Content-Type:
              schema:
                type: "string"
            Strict-Transport-Security:
              schema:
                type: "string"
            X-Content-Type-Options:
              schema:
                type: "string"
            X-Frame-Options:
              schema:
                type: "string"
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: [ "JsonWebKeysBucketApiRole", "Arn" ]
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:s3:path/${JsonWebKeysBucket}/.well-known/jwks.json"
        responses:
          "200":
            statusCode: "200"
            description: OK
            responseParameters:
              method.response.header.Content-Type: "'application/json'"
            contentHandling: "CONVERT_TO_TEXT"
          default:
            statusCode: "500"
            responseParameters:
              method.response.header.Content-Type: "'text/plain'"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "aws"

  /txmaEvent:
    post:
      operationId: postTxmaEvent
      summary: Writes an event to TxMA by `POST /txmaEvent`.
      description: Write an event to TxMA.
      requestBody:
        description: A JSON object containing a sessionId and an event name
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteTxmaEventBody'
      tags:
        - TxMA
      responses:
        '501':
          description: Not Implemented
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Cache-Control:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Strict-Transport-Security:
              schema:
                type: string
            X-Content-Type-Options:
              schema:
                type: string
            X-Frame-Options:
              schema:
                type: string
            Content-Security-Policy:
              schema:
                type: string
            Feature-Policy:
              schema:
                type: string
            Referrer-Policy:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WriteTxmaEventResponse'
      x-amazon-apigateway-integration:
        requestTemplates:
          application/json:
            statusCode: 200
        httpMethod: "POST"
        passthroughBehavior: "when_no_match"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AsyncTxmaEventFunction}:live/invocations"
        type: "aws_proxy"