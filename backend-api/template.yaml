AWSTemplateFormatVersion: "2010-09-09"

Description: async-backend SAM template for the ID Check v2 app

Parameters:
  Environment:
    Description: The environment type
    Type: String
    AllowedValues:
      - dev
      - build
      - staging
      - integration
      - production
    Default: dev

  CodeSigningConfigArn:
    Description: |
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Type: String
    Default: none

  PermissionsBoundary:
    Description: |
      The ARN of the permissions boundary to apply to any role created by the template
    Type: String
    Default: none

Mappings:
  PrivateApigw:
    dev:
      ApiBurstLimit: 10
      ApiRateLimit: 10
    build:
      ApiBurstLimit: 0
      ApiRateLimit: 0
    staging:
      ApiBurstLimit: 0
      ApiRateLimit: 0
    integration:
      ApiBurstLimit: 0
      ApiRateLimit: 0
    production:
      ApiBurstLimit: 0
      ApiRateLimit: 0
  PublicApigw:
    dev:
      ApiBurstLimit: 10
      ApiRateLimit: 10
    build:
      ApiBurstLimit: 0
      ApiRateLimit: 0
    staging:
      ApiBurstLimit: 0
      ApiRateLimit: 0
    integration:
      ApiBurstLimit: 0
      ApiRateLimit: 0
    production:
      ApiBurstLimit: 0
      ApiRateLimit: 0

  TxMA:
    dev:
      TxmaAccount: arn:aws:iam::248098332657:root
    build:
      TxmaAccount: arn:aws:iam::750703655225:root
    staging:
      TxmaAccount: arn:aws:iam::178023842775:root
    integration:
      TxmaAccount: arn:aws:iam::729485541398:root
    production:
      TxmaAccount: arn:aws:iam::451773080033:root

  KMS:
    dev:
      PendingDeletionInDays: 7
    build:
      PendingDeletionInDays: 30
    staging:
      PendingDeletionInDays: 30
    integration:
      PendingDeletionInDays: 30
    production:
      PendingDeletionInDays: 30

Conditions:
  UseCodeSigning: !Not
    - !Equals
      - !Ref CodeSigningConfigArn
      - none

  UsePermissionsBoundary: !Not
    - !Equals
      - !Ref PermissionsBoundary
      - none

  isNotDevOrBuild: !Or
    - !Equals
      - !Ref Environment
      - staging
    - !Equals
      - !Ref Environment
      - integration
    - !Equals
      - !Ref Environment
      - production

Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    Environment:
      Variables:
        SIGNING_KEY_ID: !GetAtt KMSSigningKey.Arn
        TXMA_SQS: !GetAtt TxMASQSQueue.QueueUrl
        # ISSUER should be updated with DNS once available
        ISSUER: mockIssuer
        SESSION_TABLE_NAME: !Ref SessionsTable

Resources:

  ### Private APIgw
  BackendAsyncCredentialPrivateApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-private-api
      Description: Private API gateway for Client Credentials flow
      EndpointConfiguration: PRIVATE
      Auth:
        ResourcePolicy:
          IntrinsicVpceWhitelist:
            - !ImportValue devplatform-vpc-ExecuteApiGatewayEndpointId
      StageName: !Ref Environment
      OpenApiVersion: 3.0.1
      AccessLogSetting:
        DestinationArn: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AsyncCredentialPrivateApiAccessLogs}
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: /*
          HttpMethod: '*'

          # Disable data trace in production and integration to avoid logging customer sensitive information
          DataTraceEnabled: false # Client credentials used in headers
          MetricsEnabled: true
          ThrottlingBurstLimit: !FindInMap
            - PrivateApigw
            - !Ref Environment
            - ApiBurstLimit
          ThrottlingRateLimit: !FindInMap
            - PrivateApigw
            - !Ref Environment
            - ApiRateLimit
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openApiSpecs/async-private-spec.yaml

  AsyncCredentialPrivateApiAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-private-api-access-logs
      RetentionInDays: 30

      ### Token lambda
  AsyncTokenFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AsyncTokenLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - src/functions/asyncToken/asyncTokenHandler.ts
    Properties:
      AutoPublishAlias: live
      FunctionName: !Sub ${AWS::StackName}-token
      Runtime: nodejs20.x
      Handler: asyncTokenHandler.lambdaHandler
      Events:
        AsyncToken:
          Type: Api
          Properties:
            Path: /async/token
            Method: post
            RestApiId: !Ref BackendAsyncCredentialPrivateApi
      Role: !GetAtt AsyncTokenLambdaRole.Arn
      Environment:
        Variables:
          CLIENT_REGISTRY_SECRET_NAME: !Sub ${Environment}/clientRegistry

  AsyncTokenFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AsyncTokenFunction.Arn
      Principal: events.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendAsyncCredentialPrivateApi}/*/*/*

  AsyncTokenLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-token

  AsyncTokenLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AsyncTokenFunctionSecretsManagerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Environment}/clientRegistry-?????? # wildcard as AWS automatically appends 6 characters to the end of a secret arn
        - PolicyName: AsyncTokenFunctionLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: AsyncTokenFunctionKmsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Sign
                Resource: !GetAtt KMSSigningKey.Arn
        - PolicyName: AsyncTokenFunctionSQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt TxMASQSQueue.Arn
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt TxMAKMSEncryptionKey.Arn
      RoleName: !Sub ${AWS::StackName}-token-lambda
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  AsyncCredentialFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AsyncCredentialLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - src/functions/asyncCredential/asyncCredentialHandler.ts
    Properties:
      AutoPublishAlias: live
      FunctionName: !Sub ${AWS::StackName}-credential
      Runtime: nodejs20.x
      Handler: asyncCredentialHandler.lambdaHandler
      Role: !GetAtt AsyncCredentialLambdaRole.Arn
      Environment:
        Variables:
          CLIENT_REGISTRY_SECRET_NAME: !Sub ${Environment}/clientRegistry
          SESSION_TTL_IN_MILLISECONDS: 3600000 #Used to set time to live when creating sessions. Set to 1 day.
      Events:
        AsyncCredential:
          Type: Api
          Properties:
            Path: /async/credential
            Method: post
            RestApiId: !Ref BackendAsyncCredentialPrivateApi

  AsyncCredentialLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-credential

  AsyncCredentialFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AsyncCredentialFunction.Arn
      Principal: events.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendAsyncCredentialPrivateApi}/*/*/*

  AsyncCredentialLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoReadSessionsTable
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:Query
                Resource:
                  - Fn::GetAtt: [ "SessionsTable", "Arn" ]
                  - !Sub ${SessionsTable.Arn}/index/subjectIdentifier
                Condition:
                  ForAllValues:StringEquals:
                    dynamodb:Attributes:
                      - sessionId
                      - sessionState
                      - issuedOn
                      - subjectIdentifier
                  StringEquals:
                    dynamodb:Select: SPECIFIC_ATTRIBUTES
        - PolicyName: AsyncCredentialFunctionSecretsManagerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Environment}/clientRegistry-?????? # wildcard as AWS automatically appends 6 characters to the end of a secret arn
        - PolicyName: AsyncCredentialFunctionLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: AsyncCredentialFunctionKmsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Verify
                Resource: !GetAtt KMSSigningKey.Arn
        - PolicyName: AsyncCredentialFunctionSQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt TxMASQSQueue.Arn
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt TxMAKMSEncryptionKey.Arn
                # TxMA Audit service
      RoleName: !Sub ${AWS::StackName}-credential-lambda
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  SessionsTable:
    Type: AWS::DynamoDB::Table

    # Disabling check for point in time backup
    # checkov:skip=CKV_AWS_28:Ensure Dynamodb point in time recovery (backup) is enabled
    # checkov:skip=CKV_AWS_119:No PII in table
    Properties:
      TableName: !Sub ${AWS::StackName}-sessions-table-${Environment}
      AttributeDefinitions:
        - AttributeName: sessionId
          AttributeType: S
        - AttributeName: subjectIdentifier
          AttributeType: S
        - AttributeName: "issuedOn"
          AttributeType: N
      KeySchema:
        - AttributeName: sessionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: subjectIdentifier
          KeySchema:
            - AttributeName: subjectIdentifier
              KeyType: HASH
            - AttributeName: issuedOn
              KeyType: RANGE
          Projection:
            NonKeyAttributes:
              - sessionState
              - sessionTtlExpiry
            ProjectionType: INCLUDE
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      TimeToLiveSpecification:
        AttributeName: timeToLive
        Enabled: true

  ### Regional APIgw
  BackendAsyncCredentialPublicApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${AWS::StackName}-public-api
      Description: Regional API gateway for Client Credentials flow
      EndpointConfiguration: REGIONAL
      StageName: !Ref Environment
      OpenApiVersion: 3.0.1
      AccessLogSetting:
        DestinationArn: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AsyncCredentialPublicApiAccessLogs}
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: /*
          HttpMethod: '*'
          DataTraceEnabled: false
          MetricsEnabled: true
          ThrottlingBurstLimit: !FindInMap
            - PublicApigw
            - !Ref Environment
            - ApiBurstLimit
          ThrottlingRateLimit: !FindInMap
            - PublicApigw
            - !Ref Environment
            - ApiRateLimit
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openApiSpecs/async-public-spec.yaml

  AsyncCredentialPublicApiAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-public-api-access-logs
      RetentionInDays: 30

  AsyncActiveSessionFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AsyncActiveSessionLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - src/functions/asyncActiveSession/asyncActiveSessionHandler.ts
    Properties:
      AutoPublishAlias: live
      FunctionName: !Sub ${AWS::StackName}-active-session
      Runtime: nodejs20.x
      Handler: asyncActiveSessionHandler.lambdaHandler
      Events:
        AsyncActiveSession:
          Type: Api
          Properties:
            Path: /async/activeSession
            Method: get
            RestApiId: !Ref BackendAsyncCredentialPublicApi
      Role: !GetAtt AsyncActiveSessionLambdaRole.Arn

  AsyncActiveSessionFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AsyncActiveSessionFunction.Arn
      Principal: events.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendAsyncCredentialPublicApi}/*/*/*

  AsyncActiveSessionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-active-session

  AsyncActiveSessionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AsyncActiveSessionFunctionLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
      RoleName: !Sub ${AWS::StackName}-active-session-lambda
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
  # ------------------------------ #
  TxMASQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 60
      KmsMasterKeyId: !Ref TxMAKeyAlias
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TxMASQSQueueDeadLetterQueue.Arn
        maxReceiveCount: 5

        # TxMA account consumes this queue
  TxMASQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TxMASQSQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
              - sqs:ReceiveMessage
            Resource:
              - !GetAtt TxMASQSQueue.Arn
            Principal:
              AWS:
                - !FindInMap
                  - TxMA
                  - !Ref Environment
                  - TxmaAccount
    Condition: isNotDevOrBuild #Ensures TxMA can only integrate with SQS in Staging and higher

  TxMASQSQueueDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 259200 # three days
      KmsMasterKeyId: !Sub TxMAKMSEncryptionKey

  TxMAKMSEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A KMS Key for encrypting the SQS Queue for TxMA
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
          - Effect: Allow
            Principal:
              AWS: !FindInMap
                - TxMA
                - !Ref Environment
                - TxmaAccount
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource:
              - '*'
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false
      PendingWindowInDays: !FindInMap
        - KMS
        - !Ref Environment
        - PendingDeletionInDays

  TxMAKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}-TxMAKMSEncryptionKey
      TargetKeyId: !Ref TxMAKMSEncryptionKey

      # Encryption and signing keys
  KMSSigningKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A KMS Key for signing.
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      MultiRegion: false
      PendingWindowInDays: !FindInMap
        - KMS
        - !Ref Environment
        - PendingDeletionInDays

  KMSSigningKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}-signing-key
      TargetKeyId: !Ref KMSSigningKey

  KMSEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A KMS Key for encrypting.
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
      KeySpec: RSA_2048
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false
      PendingWindowInDays: !FindInMap
        - KMS
        - !Ref Environment
        - PendingDeletionInDays

  KMSEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}-encryption-key
      TargetKeyId: !Ref KMSEncryptionKey

  ### JWKS endpoint resources
  JsonWebKeysBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-jwks-keys-${Environment}
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref JsonWebKeysBucketAccessLogs
        LogFilePrefix: !Sub ${AWS::StackName}-jwks-keys

  JsonWebKeysBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JsonWebKeysBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal:
              AWS: '*'
            Action: '*'
            Resource: !Sub
              - arn:aws:s3:::${bucketName}/*
              - bucketName: !Ref JsonWebKeysBucket
            Condition:
              Bool:
                "aws:SecureTransport": false

  JsonWebKeysBucketAccessLogs:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-jwks-keys-access-logs-${Environment}
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  JsonWebKeysBucketAccessLogsPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JsonWebKeysBucketAccessLogs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: '*'
            Condition:
              Bool:
                aws:SecureTransport: false
            Effect: Deny
            Principal:
              AWS: '*'
            Resource: !Sub
              - arn:aws:s3:::${bucketName}/*
              - bucketName: !Ref JsonWebKeysBucketAccessLogs
          - Action:
              - s3:PutObject
            Condition:
              ArnLike:
                aws:SourceArn: !GetAtt JsonWebKeysBucket.Arn
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource: !Sub
              - arn:aws:s3:::${bucketName}/*
              - bucketName: !Ref JsonWebKeysBucketAccessLogs

  JsonWebKeysFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - JsonWebKeysFunctionLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: false
        EntryPoints:
          - src/functions/jwks/jwksHandler.ts
    Properties:
      FunctionName: !Sub ${AWS::StackName}-jwks
      Description: Convert ID Check public encryption keys to JWKS format and upload to S3
      Runtime: nodejs20.x
      Handler: jwksHandler.lambdaHandler
      Role: !GetAtt JsonWebKeysFunctionLambdaRole.Arn
      Environment:
        Variables:
          ENCRYPTION_KEY_ID: !Ref KMSEncryptionKey
          JWKS_BUCKET_NAME: !Ref JsonWebKeysBucket
          JWKS_FILE_NAME: .well-known/jwks.json

  JsonWebKeysFunctionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-jwks-lambda
      Description: Role of JWKS function
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: UploadPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${TargetBucket}/*
                    - TargetBucket: !Ref JsonWebKeysBucket
        - PolicyName: GetPublicKeyPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:GetPublicKey
                Resource: !GetAtt KMSEncryptionKey.Arn
        - PolicyName: LoggingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  JsonWebKeysFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-jwks"

  JsonWebKeysCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt JsonWebKeysFunction.Arn
      ServiceTimeout: 30

  JsonWebKeysBucketApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-jwks-bucket
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: JsonWebKeysBucketPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub ${JsonWebKeysBucket.Arn}/.well-known/jwks.json
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

Outputs:
  PublicAPIGWBaseURL:
    Description: Public API Gateway base URL
    Value: !Sub https://${BackendAsyncCredentialPublicApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/
