AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: async-backend SAM template for the ID Check v2 app
Mappings:
  PrivateApigw:
    dev: 
      ApiBurstLimit: 10
      ApiRateLimit: 10
    build: 
      ApiBurstLimit: 0
      ApiRateLimit: 0
    staging: 
      ApiBurstLimit: 0
      ApiRateLimit: 0
    integration: 
      ApiBurstLimit: 0
      ApiRateLimit: 0
    production: 
      ApiBurstLimit: 0
      ApiRateLimit: 0
  TxMA:
    dev:
      TxmaAccount: arn:aws:iam::248098332657:root
    build:
      TxmaAccount: arn:aws:iam::750703655225:root
    staging:
      TxmaAccount: arn:aws:iam::178023842775:root
    integration:
      TxmaAccount: arn:aws:iam::729485541398:root
    production:
      TxmaAccount: arn:aws:iam::451773080033:root

Parameters:
  Environment:
    Description: "The environment type"
    Type: "String"
    Default: dev
    AllowedValues:
      - "dev"
      - "build"
      - "staging"
      - "integration"
      - "production"
  CodeSigningConfigArn:
    Type: String
    Description: >
      The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: >
      The ARN of the permissions boundary to apply to any role created by the template
    Default: "none"

Conditions:
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - "none"
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Globals:
  Function:
    CodeSigningConfigArn: !If
        - UseCodeSigning
        - !Ref CodeSigningConfigArn
        - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    Environment:
      Variables:
        SIGNING_KEY_ID: !ImportValue platform-kms-signing-key-arn
        TXMA_SQS: !GetAtt TxMASQSQueue.QueueUrl
        # ISSUER should be updated with DNS once available
        ISSUER: abc123 

Resources:
### Private APIgw for Client Credentials grant flow
  BackendAsyncCredentialApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-private-api"
      Description: Private APIgw for Client Credentials flow
      EndpointConfiguration: PRIVATE
      Auth:
        ResourcePolicy:
          IntrinsicVpceWhitelist:
            - !ImportValue devplatform-vpc-ExecuteApiGatewayEndpointId
      StageName: 
        Ref: Environment
      OpenApiVersion: 3.0.1
      AccessLogSetting:
        DestinationArn: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AsyncCredentialApiAccessLogs}"
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: "/*"
          HttpMethod: "*"
          # Disable data trace in production and integration to avoid logging customer sensitive information
          DataTraceEnabled: false # Client credentials used in headers
          MetricsEnabled: true
          ThrottlingBurstLimit: !FindInMap [ PrivateApigw, !Ref Environment, ApiBurstLimit ]
          ThrottlingRateLimit: !FindInMap [ PrivateApigw, !Ref Environment, ApiRateLimit ]
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: './openApiSpecs/async-private-spec.yaml'

  AsyncCredentialApiAccessLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-private-api-access-logs
      RetentionInDays: 30

### Token lambda
  AsyncTokenFunction:
    DependsOn:
      - "AsyncTokenLogGroup"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: false
        EntryPoints:
          - src/functions/asyncToken/asyncTokenHandler.ts
    Properties:
      AutoPublishAlias: live
      FunctionName: !Sub "${AWS::StackName}-token"
      Runtime: nodejs20.x
      Handler: asyncTokenHandler.lambdaHandler
      Events:
        AsyncToken:
          Type: Api
          Properties:
            Path: /async/token
            Method: post
            RestApiId: !Ref BackendAsyncCredentialApi
      Role: !GetAtt AsyncTokenLambdaRole.Arn
      Environment:
        Variables:
          CLIENT_REGISTRY_SECRET_NAME: !Sub "${Environment}/clientRegistry"

  AsyncTokenFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AsyncTokenFunction.Arn
      Principal: events.amazonaws.com
      SourceAccount: !Sub "${AWS::AccountId}"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendAsyncCredentialApi}/*/*/*"


  AsyncTokenLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-token"

  AsyncTokenLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: AsyncTokenFunctionSecretsManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Environment}/clientRegistry*"
        - PolicyName: AsyncTokenFunctionLoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: AsyncTokenFunctionKmsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:Sign
                Resource: !ImportValue platform-kms-signing-key-arn
        - PolicyName: AsyncTokenFunctionSQSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                Resource: !GetAtt TxMASQSQueue.Arn
              - Effect: Allow
                Action:
                  - "kms:Encrypt"
                  - "kms:Decrypt"
                  - "kms:GenerateDataKey"
                Resource: !GetAtt TxMAKMSEncryptionKey.Arn

### Credential Lambda
  AsyncCredentialFunction:
    DependsOn:
      - "AsyncCredentialLogGroup"
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2022"
        Sourcemap: false
        EntryPoints:
          - src/functions/asyncCredential/asyncCredentialHandler.ts
    Properties:
      AutoPublishAlias: live
      FunctionName: !Sub "${AWS::StackName}-credential"
      Runtime: nodejs20.x
      Handler: asyncCredentialHandler.lambdaHandler
      Role: !GetAtt AsyncCredentialLambdaRole.Arn
      Environment:
        Variables:
          CLIENT_REGISTRY_SECRET_NAME: !Sub "${Environment}/clientRegistry"
      Events:
        AsyncCredential:
          Type: Api
          Properties:
            Path: /async/credential
            Method: post
            RestApiId: !Ref BackendAsyncCredentialApi

  AsyncCredentialLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub "/aws/lambda/${AWS::StackName}-credential"


  AsyncCredentialFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AsyncCredentialFunction.Arn
      Principal: events.amazonaws.com
      SourceAccount: !Sub "${AWS::AccountId}"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendAsyncCredentialApi}/*/*/*"

  AsyncCredentialLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: AsyncTokenFunctionSsmPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Environment}/clientRegistry*"

# TxMA Audit service
  TxMASQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 60
      KmsMasterKeyId: !Ref TxMAKeyAlias
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TxMASQSQueueDeadLetterQueue.Arn
        maxReceiveCount: 5


# TxMA account consumes this queue
  TxMASQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref TxMASQSQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sqs:DeleteMessage"
              - "sqs:GetQueueAttributes"
              - "sqs:ChangeMessageVisibility"
              - "sqs:ReceiveMessage"
            Resource:
              - !GetAtt TxMASQSQueue.Arn
            Principal:
              AWS:
                - !FindInMap [TxMA, !Ref Environment, TxmaAccount]

  TxMASQSQueueDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 259200 # three days
      KmsMasterKeyId: !Sub TxMAKMSEncryptionKey

  TxMAKMSEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A KMS Key for encrypting the SQS Queue for TxMA
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource:
              - "*"
          - Effect: Allow
            Principal:
              AWS: !FindInMap [TxMA, !Ref Environment, TxmaAccount]
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:GenerateDataKey"
            Resource:
              - "*"
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false
      PendingWindowInDays: 7

  TxMAKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-TxMAKMSEncryptionKey"
      TargetKeyId: !Ref TxMAKMSEncryptionKey

# Encryption and signing keys

  KMSSigningKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A KMS Key for signing.
      Enabled: true
      EnableKeyRotation: false
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
      KeySpec: ECC_NIST_P256
      KeyUsage: SIGN_VERIFY
      MultiRegion: false
      PendingWindowInDays: 7

  KMSSigningKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-signing-key"
      TargetKeyId: !Ref KMSSigningKey

  KMSEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A KMS Key for encrypting.
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource:
              - '*'
      KeySpec: RSA_2048
      KeyUsage: ENCRYPT_DECRYPT
      MultiRegion: false
      PendingWindowInDays: 7

  KMSEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-encryption-key"
      TargetKeyId: !Ref KMSEncryptionKey
