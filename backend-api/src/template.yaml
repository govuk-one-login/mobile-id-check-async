# AWSTemplateFormatVersion: "2010-09-09"
# Transform: AWS::Serverless-2016-10-31
# Description: backend-async-credential SAM template for DCA CRI

# Parameters:
#   Environment:
#     Description: "The environment type"
#     Type: "String"
#     Default: dev
#   KMSKeyStack:
#     Description: The platform-kms stack to import the signing and encryption key from.
#     Type: "String"
#     Default: platform-kms

# Globals:
#   Function:
#     Environment:
#       Variables:
#         SIGNING_KEY_ID: !Sub "{{resolve:ssm:/${Environment}/${KMSKeyStack}/KMS/SigningKeyArn}}"

# Resources:
#   BackendAsyncCredentialApi:
#     Type: AWS::Serverless::Api
#     Properties:
#       Name: !Sub "id-check-${AWS::StackName}"
#       Description: Private API for async credentials
#       EndpointConfiguration: PRIVATE
#       StageName: "dev"
#       DefinitionBody:
#         Fn::Transform:
#           Name: AWS::Include
#           Parameters:
#             Location: './openApiSpecs/async-private-spec.yaml'
#       Auth:
#         ResourcePolicy:
#           IntrinsicVpceWhitelist:
#             - !ImportValue l1-platform-vpc-ExecuteApiGatewayEndpointId

#   AsyncTokenFunction:
#     Type: AWS::Serverless::Function
#     Metadata:
#       BuildMethod: esbuild
#       BuildProperties:
#         Minify: true
#         Target: "es2022"
#         Sourcemap: true
#         EntryPoints:
#           - asyncTokenHandler.ts
#     Properties:
#       AutoPublishAlias: live
#       FunctionName: !Sub "async-token-${AWS::StackName}"
#       Runtime: nodejs20.x
#       Handler: asyncTokenHandler.lambdaHandler
#       CodeUri: functions/asyncToken/
#       Events:
#         AsyncToken:
#           Type: Api
#           Properties:
#             Path: /async/token
#             Method: post
#             RestApiId: !Ref BackendAsyncCredentialApi
#       Role: !GetAtt AsyncTokenLambdaRole.Arn

#   AsyncTokenFunctionPermission:
#     Type: AWS::Lambda::Permission
#     Properties:
#       Action: lambda:InvokeFunction
#       FunctionName: !GetAtt AsyncTokenFunction.Arn
#       Principal: events.amazonaws.com
#       SourceAccount: !Sub "${AWS::AccountId}"
#       SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendAsyncCredentialApi}/*/*/*"

#   AsyncTokenLambdaRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: lambda.amazonaws.com
#             Action: 'sts:AssumeRole'
#       Policies:
#         - PolicyName: AsyncTokenFunctionSsmPolicy
#           PolicyDocument:
#             Version: '2012-10-17'
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - logs:CreateLogGroup
#                   - logs:CreateLogStream
#                   - logs:PutLogEvents
#                 Resource: 'arn:aws:logs:*:*:*'
#               - Effect: Allow
#                 Action:
#                   - ssm:GetParameter
#                 Resource:
#                   - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/dev/async-credential/CLIENT_CREDENTIALS"
#         - PolicyName: AsyncTokenFunctionKmsPolicy
#           PolicyDocument:
#             Version: '2012-10-17'
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - kms:Sign
#                 Resource: !Sub "{{resolve:ssm:/${Environment}/${KMSKeyStack}/KMS/SigningKeyArn}}"

#   AsyncCredentialFunction:
#     Type: AWS::Serverless::Function
#     Metadata:
#       BuildMethod: esbuild
#       BuildProperties:
#         Minify: true
#         Target: "es2022"
#         Sourcemap: true
#         EntryPoints:
#           - asyncCredentialHandler.ts
#     Properties:
#       AutoPublishAlias: live
#       FunctionName: !Sub "async-credential-${AWS::StackName}"
#       FunctionName: !Sub "async-credential-${AWS::StackName}"
#       Runtime: nodejs20.x
#       Handler: asyncCredentialHandler.lambdaHandler
#       CodeUri: functions/asyncCredential/
#       Events:
#         AsyncCredential:
#           Type: Api
#           Properties:
#             Path: /async/credential
#             Method: post
#             RestApiId: !Ref BackendAsyncCredentialApi

#   AsyncCredentialFunctionPermission:
#     Type: AWS::Lambda::Permission
#     Properties:
#       Action: lambda:InvokeFunction
#       FunctionName: !GetAtt AsyncCredentialFunction.Arn
#       Principal: events.amazonaws.com
#       SourceAccount: !Sub "${AWS::AccountId}"
#       SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendAsyncCredentialApi}/*/*/*"