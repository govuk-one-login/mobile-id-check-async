AWSTemplateFormatVersion: "2010-09-09"
Resources:
  AsyncReportOnAlarmsFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AsyncReportOnAlarmsLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - src/functions/asyncReportOnAlarms/asyncReportOnAlarmsHandler.ts
    Properties:
      FunctionName: !Sub ${AWS::StackName}-report-on-alarms
      Handler: asyncReportOnAlarmsHandler.lambdaHandler
      Events:
        Schedule:
          Type: ScheduleV2
          Properties:
            Description: Every minute
            Name: !Sub "${AWS::StackName}-trigger-report-on-alarms"
            RetryPolicy:
              MaximumRetryAttempts: 10
              MaximumEventAgeInSeconds: 3600
            ScheduleExpression: "rate(1 minute)" # will become cron
            ScheduleExpressionTimezone: "Europe/London"
            State: "DISABLED"
            PermissionsBoundary: !If
              - UsePermissionsBoundary
              - !Ref PermissionsBoundary
              - !Ref AWS::NoValue
      Role: !GetAtt AsyncReportOnAlarmsLambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !ImportValue devplatform-vpc-PrivateSubnetIdA
          - !ImportValue devplatform-vpc-PrivateSubnetIdB
          - !ImportValue devplatform-vpc-PrivateSubnetIdC
        SecurityGroupIds:
          - !ImportValue devplatform-vpc-AWSServicesEndpointSecurityGroupId
  
  AsyncReportOnAlarmsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-report-on-alarms

  
  AsyncReportOnAlarmsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-report-on-alarms-lambda
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AsyncReportOnAlarmsFunctionLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: VpcPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: '*'
        - PolicyName: AsyncReportOnAlarmsFunctionCloudwatchPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:DescribeAlarmHistory
                Resource: '*'
        - PolicyName: AsyncReportOnAlarmsFunctionSnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref AlarmReportingSNSTopic
        - PolicyName: AsyncReportOnAlarmsFunctionKmsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:GenerateDataKey
                  - kms:Decrypt
                Resource: !GetAtt AlarmReportingSNSTopicKey.Arn
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  AlarmReportingSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${AWS::StackName}-alarm-reporting
      FifoTopic: false
      KmsMasterKeyId: !Ref AlarmReportingSNSTopicKey
      TopicName: !Sub ${AWS::StackName}-alarm-reporting

  AlarmReportingSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Resource: !Ref AlarmReportingSNSTopic
      Topics:
        - !Ref AlarmReportingSNSTopic

  AlarmReportingSNSTopicKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Statement:
          - Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Resource: '*'
            Sid: Allow Cloudwatch to enqueue encrypted messages
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Resource: '*'
            Sid: Allow the account to manage the key
        Version: "2012-10-17"

  ChatbotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: chatbot.amazonaws.com
            Action:
              - sts:AssumeRole

  ChatbotChannelConfiguration:
    Type: AWS::Chatbot::SlackChannelConfiguration
    Properties:
      ConfigurationName: !Sub ${AWS::StackName}-alarm-reporting
      IamRoleArn: !GetAtt ChatbotRole.Arn
      SlackWorkspaceId: !Ref SlackWorkspaceId
      SlackChannelId: !Ref SlackChannelId
      LoggingLevel: INFO
      SnsTopicArns:
        - !Ref AlarmReportingSNSTopic