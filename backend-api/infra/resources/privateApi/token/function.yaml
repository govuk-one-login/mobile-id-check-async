AWSTemplateFormatVersion: "2010-09-09"
Resources:
  AsyncTokenFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AsyncTokenLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - src/functions/asyncToken/asyncTokenHandler.ts
    Properties:
      FunctionName: !Sub ${AWS::StackName}-token      
      Handler: asyncTokenHandler.lambdaHandler
      Events:
        PostToken:
          Type: Api
          Properties:
            Path: /async/token
            Method: post
            RestApiId: !Ref PrivateApi
      Role: !GetAtt AsyncTokenLambdaRole.Arn
      ReservedConcurrentExecutions: !If
        - isDev
        - !Ref AWS::NoValue
        - !FindInMap
          - EnvironmentVariables
          - AsyncTokenReservedConcurrentExecutions
          - !Ref Environment
      DeploymentPreference:
        Enabled: true
        Alarms: !If
          - UseCanaryDeployment
          - - !Ref AsyncTokenErrorRateAlarm      
            - !Ref AsyncTokenLowCompletionAlarm
          - - !Ref AWS::NoValue
        Type: !Ref LambdaDeploymentPreference
      Environment:
        Variables:
          CLIENT_REGISTRY_SECRET_NAME: !FindInMap [EnvironmentVariables, ClientRegistrySecretPath, !Ref Environment]
      VpcConfig:
        SubnetIds:
          - !ImportValue devplatform-vpc-PrivateSubnetIdA
          - !ImportValue devplatform-vpc-PrivateSubnetIdB
          - !ImportValue devplatform-vpc-PrivateSubnetIdC
        SecurityGroupIds:
          - !ImportValue devplatform-vpc-AWSServicesEndpointSecurityGroupId

  AsyncTokenLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-token

  AsyncTokenSubscriptionFilter:    
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: 
        !FindInMap [EnvironmentVariables, CslsEgress, !Ref Environment]
      FilterPattern: ""
      LogGroupName: !Ref AsyncTokenLogGroup
    Condition: isNotDev

  AsyncTokenLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-token-lambda
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AsyncTokenFunctionSecretsManagerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub
                    - arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${clientRegistrySecretPath}-??????
                    - clientRegistrySecretPath: !FindInMap [EnvironmentVariables, ClientRegistrySecretPath, !Ref Environment]
        - PolicyName: AsyncTokenFunctionLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: AsyncTokenFunctionKmsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Sign
                Resource: !GetAtt KMSSigningKey.Arn
        - PolicyName: AsyncTokenFunctionSQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt TxMASqs.Arn
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt TxMAKMSEncryptionKey.Arn
        - PolicyName: VpcPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: '*'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue