AWSTemplateFormatVersion: "2010-09-09"
Resources:
  ProxyLambda:
    Type: AWS::Serverless::Function
    DependsOn:
      - ProxyLambdaLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - src/functions/proxy/proxyHandler.ts
    Properties:
      Environment:
        Variables:
          PRIVATE_API_URL: !Sub https://${PrivateApi.RestApiId}.execute-api.eu-west-2.amazonaws.com/${Environment}
      FunctionName: !Sub ${AWS::StackName}-proxy-lambda      
      Handler: proxyHandler.lambdaHandler
      Role: !GetAtt ProxyLambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !ImportValue devplatform-vpc-PrivateSubnetIdA
          - !ImportValue devplatform-vpc-PrivateSubnetIdB
          - !ImportValue devplatform-vpc-PrivateSubnetIdC
        SecurityGroupIds:
          - !Ref ProxyLambdaSecurityGroup
    Condition: ProxyApiDeployment

  ProxyLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-proxy-lambda
    Condition: ProxyApiDeployment

  ProxyLambdaSubscriptionFilter:    
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: 
        !FindInMap [EnvironmentVariables, CSLSEGRESS, !Ref Environment]
      FilterPattern: ""
      LogGroupName: !Ref ProxyLambdaLogGroup
    Condition: DeployProxyCsls

  ProxyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-proxy-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ProxyFunctionLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt ProxyLambdaLogGroup.Arn
        - PolicyName: VpcPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: '*'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
    Condition: ProxyApiDeployment

  ProxyLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-proxy-sg
      GroupDescription: Lambda Security group ruleset.
      SecurityGroupEgress:
        - CidrIp: !ImportValue devplatform-vpc-VpcCidr
          Description: TCP HTTPS outbound to vpc.
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !ImportValue devplatform-vpc-VpcId
    Condition: ProxyApiDeployment

  ProxyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ProxyLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ProxyApi}/*/*/*
    Condition: ProxyApiDeployment