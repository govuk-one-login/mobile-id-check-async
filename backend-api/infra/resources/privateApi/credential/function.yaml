AWSTemplateFormatVersion: "2010-09-09"
Resources:
  AsyncCredentialFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AsyncCredentialLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - src/functions/asyncCredential/asyncCredentialHandler.ts
    Properties:
      FunctionName: !Sub ${AWS::StackName}-credential      
      Handler: asyncCredentialHandler.lambdaHandler
      Role: !GetAtt AsyncCredentialLambdaRole.Arn
      ReservedConcurrentExecutions: !If
        - isDev
        - !Ref AWS::NoValue
        - !FindInMap
          - Lambda
          - !Ref Environment
          - AsyncCredentialReservedConcurrentExecutions
      DeploymentPreference:
        Enabled: true
        Alarms: !If
          - UseCanaryDeployment
          - - !Ref AsyncCredentialErrorRateAlarm           
            - !Ref AsyncCredentialLowCompletionAlarm
          - - !Ref AWS::NoValue
        Type: !Ref LambdaDeploymentPreference
      Environment:
        Variables:
          CLIENT_REGISTRY_SECRET_NAME: !FindInMap [EnvironmentVariables, !Ref Environment, ClientRegistrySecretPath]
          SESSION_DURATION_IN_SECONDS: !FindInMap [EnvironmentVariables, !Ref Environment, SessionDurationInSeconds] #Used to set time to live when creating sessions
      VpcConfig:
        SubnetIds:
          - !ImportValue devplatform-vpc-PrivateSubnetIdA
          - !ImportValue devplatform-vpc-PrivateSubnetIdB
          - !ImportValue devplatform-vpc-PrivateSubnetIdC
        SecurityGroupIds:
          - !ImportValue devplatform-vpc-AWSServicesEndpointSecurityGroupId
  
  AsyncCredentialLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-credential
    
  AsyncCredentialSubscriptionFilter:    
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: 
        !FindInMap [CslsConfiguration, !Ref Environment, CSLSEGRESS]
      FilterPattern: ""
      LogGroupName: !Ref AsyncCredentialLogGroup
    Condition: isNotDev

  AsyncCredentialFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AsyncCredentialFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PrivateApi}/*/*/*

  AsyncCredentialLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-credential-lambda
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoReadSessionsTable
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - Fn::GetAtt: ["SessionsTable", "Arn"]
                  - !Sub ${SessionsTable.Arn}/index/subjectIdentifier-createdAt-index
                Condition:
                  ForAllValues:StringEquals:
                    dynamodb:Attributes:
                      - sessionId
                      - sessionState
                      - subjectIdentifier
                      - createdAt
                  StringEquals:
                    dynamodb:Select: SPECIFIC_ATTRIBUTES
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt SessionsTable.Arn
        - PolicyName: AsyncCredentialFunctionSecretsManagerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub
                    - arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${clientRegistrySecretPath}-?????? # wildcard as AWS automatically appends 6 characters to the end of a secret arn
                    - clientRegistrySecretPath: !FindInMap [ EnvironmentVariables, !Ref Environment, ClientRegistrySecretPath ]
        - PolicyName: AsyncCredentialFunctionLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: AsyncCredentialFunctionKmsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Verify
                Resource: !GetAtt KMSSigningKey.Arn
        - PolicyName: AsyncCredentialFunctionSQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt TxMASqs.Arn
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt TxMAKMSEncryptionKey.Arn
        - PolicyName: VpcPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: '*'
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue