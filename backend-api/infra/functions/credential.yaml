AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Description: The environment type
  PermissionsBoundary:
    Type: String
    Description: The ARN of the permissions boundary
  StackName:
    Type: String
    Description: Name of the parent stack
  PrivateApiId:
    Type: String
    Description: ID of the private API Gateway
  KmsSigningKeyArn:
    Type: String
    Description: ARN of the KMS signing key
  TxMAQueueArn:
    Type: String
    Description: ARN of the TxMA SQS queue
  TxMAKmsKeyArn:
    Type: String
    Description: ARN of the TxMA KMS key
  SessionsTableArn:
    Type: String
    Description: ARN of the Sessions DynamoDB table
  SessionsTableName:
    Type: String
    Description: Name of the Sessions DynamoDB table

Resources:
  AsyncCredentialFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AsyncCredentialLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - src/functions/asyncCredential/asyncCredentialHandler.ts
    Properties:
      AutoPublishAlias: live
      FunctionName: !Sub ${StackName}-credential
      Runtime: nodejs20.x
      Handler: asyncCredentialHandler.lambdaHandler
      Role: !GetAtt AsyncCredentialLambdaRole.Arn
      Environment:
        Variables:
          CLIENT_REGISTRY_SECRET_NAME: !Sub ${Environment}/clientRegistry
          SESSION_DURATION_IN_SECONDS: 3600
      VpcConfig:
        SubnetIds:
          - !ImportValue devplatform-vpc-PrivateSubnetIdA
          - !ImportValue devplatform-vpc-PrivateSubnetIdB
          - !ImportValue devplatform-vpc-PrivateSubnetIdC
        SecurityGroupIds:
          - !ImportValue devplatform-vpc-AWSServicesEndpointSecurityGroupId

  AsyncCredentialFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AsyncCredentialFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceAccount: !Sub ${AWS::AccountId}
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${PrivateApiId}/*/*/*

  AsyncCredentialLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub /aws/lambda/${StackName}-credential

  AsyncCredentialLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${StackName}-credential-lambda
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoReadSessionsTable
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Ref SessionsTableArn
                  - !Sub ${SessionsTableArn}/index/subjectIdentifier-timeToLive-index
                Condition:
                  ForAllValues:StringEquals:
                    dynamodb:Attributes:
                      - sessionId
                      - sessionState
                      - subjectIdentifier
                      - timeToLive
                  StringEquals:
                    dynamodb:Select: SPECIFIC_ATTRIBUTES
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !Ref SessionsTableArn
        - PolicyName: AsyncCredentialFunctionSecretsManagerPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Environment}/clientRegistry-??????
        - PolicyName: AsyncCredentialFunctionLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: AsyncCredentialFunctionKmsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Verify
                Resource: !Ref KmsSigningKeyArn
        - PolicyName: AsyncCredentialFunctionSQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !Ref TxMAQueueArn
              - Effect: Allow
                Action:
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !Ref TxMAKmsKeyArn
        - PolicyName: VpcPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: '*'
      PermissionsBoundary: !Ref PermissionsBoundary

Outputs:
  FunctionArn:
    Description: Credential Lambda Function ARN
    Value: !GetAtt AsyncCredentialFunction.Arn
  
  FunctionName:
    Description: Credential Lambda Function Name
    Value: !Ref AsyncCredentialFunction