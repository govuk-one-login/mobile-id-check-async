AWSTemplateFormatVersion: "2010-09-09"

Resources:
  AsyncIssueBiometricCredentialFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - AsyncIssueBiometricCredentialLogGroup
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2022
        Sourcemap: false
        EntryPoints:
          - src/functions/asyncIssueBiometricCredential/asyncIssueBiometricCredentialHandler.ts
    Properties:
      FunctionName: !Sub ${AWS::StackName}-issue-biometric-credential
      Handler: asyncIssueBiometricCredentialHandler.lambdaHandler
      DeploymentPreference:
        Enabled: true
        Alarms: !If
          - UseCanaryDeployment
          - - !Ref AsyncIssueBiometricCredentialErrorRateAlarm
            - !Ref AsyncIssueBiometricCredentialLowCompletionAlarm
          - - !Ref AWS::NoValue
        Type: !Ref LambdaDeploymentPreference
      Environment:
        Variables:
          ENABLE_BIOMETRIC_RESIDENCE_CARD: !FindInMap [EnvironmentVariables, !Ref Environment, EnableBiometricResidenceCard]
          ENABLE_BIOMETRIC_RESIDENCE_PERMIT: !FindInMap [EnvironmentVariables, !Ref Environment, EnableBiometricResidencePermit]
          ENABLE_DRIVING_LICENCE: !FindInMap [EnvironmentVariables, !Ref Environment, EnableDrivingLicence]
          ENABLE_NFC_PASSPORT: !FindInMap [EnvironmentVariables, !Ref Environment, EnableNfcPassport]
          ENABLE_UTOPIA_TEST_DOCUMENT: !FindInMap [EnvironmentVariables, !Ref Environment, EnableUtopiaTestDocument]
          BIOMETRIC_VIEWER_KEY_SECRET_PATH: !FindInMap [EnvironmentVariables, !Ref Environment, BiometricViewerAccessKey]
          BIOMETRIC_VIEWER_ACCESS_KEY_SECRET_CACHE_DURATION_IN_SECONDS: !FindInMap [EnvironmentVariables, !Ref Environment, BiometricViewerAccessKeySecretCacheDurationInSeconds]
          VERIFIABLE_CREDENTIAL_SIGNING_KEY_ID: !Ref VerifiableCredentialSigningKey
          READID_BASE_URL: !If
            - UseDevOverrideReadIdBaseUrl
            - !Ref DevOverrideReadIdBaseUrl
            - !FindInMap [EnvironmentVariables, !Ref Environment, ReadIdBaseUrl]
      Role: !GetAtt AsyncIssueBiometricCredentialLambdaRole.Arn
      VpcConfig:
        SubnetIds:
          - !ImportValue devplatform-vpc-ProtectedSubnetIdA
          - !ImportValue devplatform-vpc-ProtectedSubnetIdB
          - !ImportValue devplatform-vpc-ProtectedSubnetIdC
        SecurityGroupIds:
          - !ImportValue devplatform-vpc-AWSServicesEndpointSecurityGroupId
      ReservedConcurrentExecutions: !If
      - isDev
      - !Ref AWS::NoValue
      - !FindInMap
        - Lambda
        - !Ref Environment
        - IssueBiometricCredentialReservedConcurrentExecutions

  AsyncIssueBiometricCredentialLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-issue-biometric-credential

  AsyncIssueBiometricCredentialSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn:
        !FindInMap [CslsConfiguration, !Ref Environment, CSLSEGRESS]
      FilterPattern: ""
      LogGroupName: !Ref AsyncIssueBiometricCredentialLogGroup
    Condition: isNotDev

  AsyncIssueBiometricCredentialLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-issue-biometric-credential-lambda
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AsyncIssueBiometricCredentialLoggingPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: VpcPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                Resource: '*'
        - PolicyName: SQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: 
                  - !GetAtt VendorProcessingSQS.Arn
        - PolicyName: AsyncIssueBiometricCredentialFunctionTxmaSQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt TxMASQSQueue.Arn
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt TxMAKMSEncryptionKey.Arn
        - PolicyName: AsyncIssueBiometricCredentialFunctionIPVCoreSQSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt IPVCoreSQS.Arn
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt IPVCoreKMSEncryptionKey.Arn
        - PolicyName: KMSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !GetAtt VendorProcessingKMSEncryptionKey.Arn
        - PolicyName: AsyncIssueBiometricCredentialFunctionVCSigningPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - kms:Sign
                Resource: !GetAtt VerifiableCredentialSigningKey.Arn
        - PolicyName: AsyncIssueBiometricCredentialParameterStorePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub
                    - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${biometricViewerAccessKey}
                    - biometricViewerAccessKey: !FindInMap [EnvironmentVariables, !Ref Environment, BiometricViewerAccessKey]
        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:UpdateItem"
                Resource: !GetAtt SessionsTable.Arn
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  IssueBiometricCredentialEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      ScalingConfig:
        MaximumConcurrency: 34
      Enabled: true
      EventSourceArn: !GetAtt VendorProcessingSQS.Arn
      FunctionName: !Ref AsyncIssueBiometricCredentialFunction.Alias